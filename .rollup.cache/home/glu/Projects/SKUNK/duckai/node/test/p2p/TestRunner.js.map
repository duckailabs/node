{"version":3,"file":"TestRunner.js","sourceRoot":"","sources":["TestRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from \"events\";\nimport { createPublicClient, createWalletClient, http } from \"viem\";\nimport { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\nimport { baseSepolia } from \"viem/chains\";\nimport { P2PNetwork } from \"../../src/p2p\";\nimport { Logger } from \"./logger\";\n\ninterface TestMessage {\n  from: string;\n  to: string;\n  content: string;\n  timestamp: number;\n}\n\ninterface TestResult {\n  success: boolean;\n  error?: Error;\n  messagesSent: number;\n  messagesReceived: number;\n  startTime: number;\n  endTime: number;\n}\n\ninterface TestSummary {\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  results: Map<string, TestResult>;\n  duration: number;\n}\n\ninterface AgentCapabilities {\n  canProcess: string[];\n}\n\nexport class TestRunner extends EventEmitter {\n  private bootstrapNodes: P2PNetwork[] = [];\n  private agents: Map<string, P2PNetwork> = new Map();\n  private messageLog: TestMessage[] = [];\n  private results: Map<string, TestResult> = new Map();\n  private funderClient: any;\n\n  constructor(\n    private readonly registryAddress: string,\n    private readonly rpcUrl: string,\n    private readonly funderPrivateKey: `0x${string}` // Private key of the wallet with funds\n  ) {\n    super();\n  }\n\n  async init() {\n    // Initialize logging with both stdout and file output\n    await Logger.init(\"p2p-test\", {\n      useStdout: true,\n      useFile: true,\n    });\n\n    // Create wallet client for funding transactions\n    const funderAccount = privateKeyToAccount(this.funderPrivateKey);\n    this.funderClient = createWalletClient({\n      account: funderAccount,\n      chain: baseSepolia,\n      transport: http(this.rpcUrl),\n    });\n  }\n\n  private async fundAgent(address: string): Promise<boolean> {\n    try {\n      Logger.info(\"Test\", `Funding agent ${address} from funder wallet`);\n\n      // Send 0.003 ETH to cover registration (est. 0.00186 ETH) and messaging costs\n      const hash = await this.funderClient.sendTransaction({\n        to: address,\n        value: BigInt(5000000000000000n), // 0.003 ETH\n      });\n\n      // Wait for transaction confirmation\n      const publicClient = createPublicClient({\n        chain: baseSepolia,\n        transport: http(this.rpcUrl),\n      });\n      await publicClient.waitForTransactionReceipt({ hash });\n\n      Logger.info(\"Test\", `Successfully funded agent ${address}`);\n      return true;\n    } catch (error) {\n      Logger.error(\"Test\", \"Failed to fund agent\", { error, address });\n      return false;\n    }\n  }\n\n  private generateAgentCapabilities(): AgentCapabilities {\n    return {\n      canProcess: [\"market_sentiment\", \"financial_news\", \"market_trends\"],\n    };\n  }\n\n  private generatePrivateKey(): `0x${string}` {\n    return generatePrivateKey();\n  }\n\n  async startBootstrapNodes(count: number = 2) {\n    const startPort = 14221;\n    for (let i = 0; i < count; i++) {\n      const port = startPort + i;\n      const privateKey = this.generatePrivateKey();\n\n      // Create public client for balance check\n      const account = privateKeyToAccount(privateKey);\n      const client = createPublicClient({\n        chain: baseSepolia,\n        transport: http(this.rpcUrl),\n      });\n\n      // Check balance and fund if needed\n      const balance = await client.getBalance({ address: account.address });\n      if (balance === 0n) {\n        const funded = await this.fundAgent(account.address);\n        if (!funded) {\n          throw new Error(`Failed to fund bootstrap node ${i}`);\n        }\n        Logger.info(\n          \"Test\",\n          `Funded bootstrap node ${i} at address ${account.address}`\n        );\n      }\n\n      // Create bootstrap node\n      const node = new P2PNetwork(\n        privateKey,\n        `bootstrap-${i}`,\n        \"1.0.0\",\n        {}, // Bootstrap nodes don't need capabilities\n        this.registryAddress,\n        this.rpcUrl\n      );\n\n      await node.start(port);\n      await node.registerWithContract(); // Register bootstrap nodes too\n      this.bootstrapNodes.push(node);\n      Logger.info(\n        \"Test\",\n        `Bootstrap node ${i} started on port ${port} with address ${node.getAddress()}`\n      );\n    }\n\n    // Wait for bootstrap nodes to be ready and announce themselves\n    Logger.info(\"Test\", \"Waiting for bootstrap nodes to initialize DHT...\");\n    await new Promise((resolve) => setTimeout(resolve, 20000));\n\n    // Verify bootstrap nodes are connected to each other\n    for (const node of this.bootstrapNodes) {\n      const peers = await node.getPeers();\n      Logger.info(\"Test\", `Bootstrap node peers:`, {\n        address: node.getAddress(),\n        peerCount: peers.length,\n        peers: peers.map(String),\n      });\n    }\n  }\n\n  async createAgents(count: number) {\n    const startPort = 14230;\n\n    // Get bootstrap addresses\n    const bootstrapAddresses = this.bootstrapNodes.map((node) =>\n      node.getAddress()\n    );\n    Logger.info(\"Test\", \"Using bootstrap nodes\", { bootstrapAddresses });\n\n    // Create and register all agents first\n    const agentPromises = [];\n    for (let i = 0; i < count; i++) {\n      const port = startPort + i;\n      const privateKey = this.generatePrivateKey();\n      const account = privateKeyToAccount(privateKey);\n\n      // Check balance and fund if needed\n      const client = createPublicClient({\n        chain: baseSepolia,\n        transport: http(this.rpcUrl),\n      });\n      const balance = await client.getBalance({ address: account.address });\n      if (balance === 0n) {\n        const funded = await this.fundAgent(account.address);\n        if (!funded) {\n          throw new Error(\n            `Failed to fund agent ${i} at address ${account.address}`\n          );\n        }\n        Logger.info(\"Test\", `Funded agent ${i} at address ${account.address}`);\n      }\n\n      // Create agent with metadata including capabilities\n      const capabilities = this.generateAgentCapabilities();\n      const node = new P2PNetwork(\n        privateKey,\n        `test-agent-${i}`,\n        \"1.0.0\",\n        {\n          creators: `Test Framework Agent ${i}`,\n          tokenAddress: undefined,\n          capabilities,\n        },\n        this.registryAddress,\n        this.rpcUrl\n      );\n\n      // Register with contract first\n      await node.registerWithContract();\n      Logger.info(\"Test\", `Agent ${i} registered with contract`);\n\n      // Listen for messages\n      node.on(\"message\", (msg: any) => {\n        this.messageLog.push({\n          from: msg.fromAgentId,\n          to: msg.toAgentId,\n          content: msg.content,\n          timestamp: Date.now(),\n        });\n      });\n\n      // Start node and wait for bootstrap connection\n      await node.start(port);\n      await node.waitForBootstrapConnection();\n      Logger.info(\"Test\", `Agent ${i} connected to bootstrap nodes`);\n\n      // Store agent\n      this.agents.set(`test-agent-${i}`, node);\n      Logger.info(\"Test\", `Agent ${i} started on port ${port}`);\n\n      // Wait between agent startups\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      // Verify DHT publishing\n      const address = node.getAddress().toLowerCase();\n      Logger.info(\"Test\", `Verifying DHT records for agent ${i}`, { address });\n\n      // Wait for DHT record to be published\n      let published = false;\n      for (let attempt = 0; attempt < 3; attempt++) {\n        try {\n          const records = await node.getDHTRecords();\n          if (records[address]) {\n            published = true;\n            Logger.info(\n              \"Test\",\n              `Agent ${i} DHT record published successfully`,\n              {\n                record: records[address],\n                allRecords: records,\n              }\n            );\n            break;\n          }\n        } catch (error) {\n          Logger.warn(\n            \"Test\",\n            `Attempt ${attempt + 1} to verify DHT record failed`,\n            { error }\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 5000));\n      }\n\n      if (!published) {\n        Logger.warn(\"Test\", `Failed to verify DHT record for agent ${i}`);\n      }\n    }\n\n    // Wait for peer discovery\n    Logger.info(\"Test\", \"Waiting for peer discovery between agents...\");\n    await new Promise((resolve) => setTimeout(resolve, 30000));\n\n    // Verify peer connections\n    for (const [name, node] of this.agents) {\n      const peers = await node.getPeers();\n      const knownPeers = await node.getKnownPeers();\n      Logger.info(\"Test\", `Agent ${name} connected peers:`, {\n        peerCount: peers.length,\n        peers: peers.map(String),\n        knownPeers,\n      });\n    }\n  }\n\n  async runMessageTest() {\n    const startTime = Date.now();\n    const result: TestResult = {\n      success: true,\n      messagesSent: 0,\n      messagesReceived: 0,\n      startTime,\n      endTime: 0,\n    };\n\n    try {\n      Logger.info(\"Test\", \"Starting message test\");\n\n      // Wait for peer discovery\n      Logger.info(\"Test\", \"Waiting for peer discovery...\");\n      await new Promise((resolve) => setTimeout(resolve, 10000)); // 10 second wait for discovery\n\n      // Log connected peers for each agent\n      for (const [name, node] of this.agents) {\n        const peers = await node.getPeers();\n        Logger.info(\"Test\", `Agent ${name} connected peers:`, {\n          peerCount: peers.length,\n        });\n      }\n\n      // Each agent sends a message to every other agent\n      for (const [fromName, fromNode] of this.agents) {\n        for (const [toName, toNode] of this.agents) {\n          if (fromName === toName) continue;\n\n          const message = `Test message from ${fromName} to ${toName}`;\n          await fromNode.sendMessage(toNode.getAddress(), message);\n          result.messagesSent++;\n          // Small delay between messages to avoid overwhelming the network\n          await new Promise((resolve) => setTimeout(resolve, 100));\n        }\n      }\n\n      // Wait longer for messages to be received\n      Logger.info(\"Test\", \"Waiting for messages to be received...\");\n      await new Promise((resolve) => setTimeout(resolve, 15000)); // Increased to 15 seconds\n\n      // Verify messages\n      const expectedMessages = this.agents.size * (this.agents.size - 1);\n      result.messagesReceived = this.messageLog.length;\n\n      if (result.messagesReceived !== expectedMessages) {\n        throw new Error(\n          `Expected ${expectedMessages} messages, but received ${result.messagesReceived}`\n        );\n      }\n    } catch (error) {\n      result.success = false;\n      result.error = error as Error;\n    }\n\n    result.endTime = Date.now();\n    this.results.set(\"message-test\", result);\n    return result;\n  }\n\n  generateSummary(): TestSummary {\n    const summary: TestSummary = {\n      totalTests: this.results.size,\n      passedTests: 0,\n      failedTests: 0,\n      results: this.results,\n      duration: 0,\n    };\n\n    for (const result of this.results.values()) {\n      if (result.success) {\n        summary.passedTests++;\n      } else {\n        summary.failedTests++;\n      }\n      summary.duration += result.endTime - result.startTime;\n    }\n\n    return summary;\n  }\n\n  async cleanup() {\n    // Stop all agents\n    for (const agent of this.agents.values()) {\n      await agent.stop();\n    }\n    this.agents.clear();\n\n    // Stop bootstrap nodes\n    for (const node of this.bootstrapNodes) {\n      await node.stop();\n    }\n    this.bootstrapNodes = [];\n\n    // Clear test data\n    this.messageLog = [];\n    this.results.clear();\n  }\n}\n"]}