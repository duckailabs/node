{"version":3,"file":"run-test.js","sourceRoot":"","sources":["run-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { config } from \"dotenv\";\nimport { resolve } from \"path\";\nimport { Logger } from \"./logger\";\nimport { TestRunner } from \"./TestRunner\";\n\n// Initialize logger and load environment variables\n(async () => {\n  await Logger.init(\"p2p-test\");\n\n  // Load environment variables\n  const envFile = process.env.ENV_FILE || \".env\";\n  config({ path: resolve(process.cwd(), envFile) });\n\n  await main().catch(console.error);\n})();\n\nasync function main() {\n  const funderPrivateKey = process.env.FUNDER_PRIVATE_KEY;\n  if (!funderPrivateKey) {\n    throw new Error(\"FUNDER_PRIVATE_KEY environment variable is required\");\n  }\n\n  // Contract addresses and network config\n  const registryAddress = \"0x05430ECEc2E4D86736187B992873EA8D5e1f1e32\"; // AgentRegistry on Base Sepolia\n  const rpcUrl = \"https://sepolia.base.org\"; // Base Sepolia RPC\n\n  const runner = new TestRunner(\n    registryAddress,\n    rpcUrl,\n    funderPrivateKey as `0x${string}`\n  );\n\n  let testResult;\n  try {\n    await runner.init();\n    Logger.info(\"Test\", \"Starting P2P network test\");\n\n    // Start bootstrap nodes\n    await runner.startBootstrapNodes(2);\n    Logger.info(\"Test\", \"Bootstrap nodes started\");\n\n    // Create test agents\n    const agentCount = 5;\n    await runner.createAgents(agentCount);\n    Logger.info(\"Test\", `Created ${agentCount} test agents`);\n\n    // Wait for peer discovery\n    Logger.info(\"Test\", \"Waiting for peer discovery...\");\n    await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds\n\n    // Run message test\n    Logger.info(\"Test\", \"Running message test\");\n    testResult = await runner.runMessageTest();\n\n    // Generate and display test summary\n    const summary = runner.generateSummary();\n\n    console.log(\"\\n========================================\");\n    console.log(\"           Test Summary\");\n    console.log(\"========================================\");\n    console.log(`Total Tests:      ${summary.totalTests}`);\n    console.log(`Passed:           ${summary.passedTests}`);\n    console.log(`Failed:           ${summary.failedTests}`);\n    console.log(`Total Duration:   ${summary.duration}ms`);\n    console.log(\"----------------------------------------\");\n\n    // Display detailed results\n    console.log(\"\\nDetailed Results:\");\n    summary.results.forEach((result, testName) => {\n      console.log(`\\n${testName}:`);\n      console.log(\n        `  Status:            ${result.success ? \"✅ Passed\" : \"❌ Failed\"}`\n      );\n      console.log(`  Messages Sent:     ${result.messagesSent}`);\n      console.log(`  Messages Received: ${result.messagesReceived}`);\n      console.log(\n        `  Duration:          ${result.endTime - result.startTime}ms`\n      );\n      if (result.error) {\n        console.log(`  Error:             ${result.error.message}`);\n      }\n    });\n    console.log(\"\\n========================================\");\n\n    if (!testResult.success) {\n      throw testResult.error;\n    }\n  } catch (error) {\n    Logger.error(\"Test\", \"Test failed\", { error });\n    console.error(\"\\n❌ Error details:\", error);\n    process.exit(1);\n  } finally {\n    await runner.cleanup();\n    Logger.info(\"Test\", \"Test cleanup completed\");\n    // Exit with appropriate status code\n    process.exit(testResult?.success ? 0 : 1);\n  }\n}\n"]}