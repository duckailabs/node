{"version":3,"file":"constants.js","sourceRoot":"","sources":["constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAE7D,OAAO,EAAE,UAAU,IAAI,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAE7E,gCAAgC;AAChC,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,aAAa,EAAE,6BAA6B;IAC5C,aAAa,EAAE,6BAA6B;IAC5C,aAAa,EAAE,6BAA6B;IAC5C,aAAa,EAAE,yBAAyB;CAChC,CAAC;AAEX,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,aAAa,EAAE,uDAAuD;IACtE,aAAa,EAAE,uDAAuD;IACtE,aAAa,EAAE,uDAAuD;IACtE,aAAa,EAAE,uDAAuD;CAC9D,CAAC;AAEX,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,aAAa,EAAE,OAAO,EAAE,mBAAmB;IAC3C,aAAa,EAAE,OAAO,EAAE,mBAAmB;IAC3C,aAAa,EAAE,OAAO,EAAE,0CAA0C;IAClE,aAAa,EAAE,OAAO,EAAE,0CAA0C;CAC1D,CAAC;AAEX,MAAM,UAAU,iBAAiB;IAC/B,OAAO,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAC3C,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,CACjB,SAAS,cAAc,CAAC,IAAmC,CAAC,QAC1D,eAAe,CAAC,IAAoC,CACtD,QAAQ,MAAM,EAAE,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,SAAiB;IACrD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAErD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,oBAAoB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACtE,OAAO,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CACb,sCAAsC,SAAS,KAAK,KAAK,EAAE,CAC5D,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { privateKeyFromProtobuf } from \"@libp2p/crypto/keys\";\nimport type { PrivateKey } from \"@libp2p/interface\";\nimport { fromString as uint8ArrayFromString } from \"uint8arrays/from-string\";\n\n// Bootstrap node configurations\nexport const BOOTSTRAP_URLS = {\n  \"bootstrap-1\": \"us-east.hosting.openpond.ai\",\n  \"bootstrap-2\": \"us-west.hosting.openpond.ai\",\n  \"bootstrap-3\": \"eu-west.hosting.openpond.ai\",\n  \"bootstrap-4\": \"sea.hosting.openpond.ai\",\n} as const;\n\nexport const BOOTSTRAP_PEER_IDS = {\n  \"bootstrap-1\": \"16Uiu2HAmDD9JV9oqwTGiZzMJzEZJPA6hgrUyzSXdcqpnVhUJ2eXa\",\n  \"bootstrap-2\": \"16Uiu2HAkz9FFsJDhfx2658VXcmeooxtqPqtMYWUG5nJRXBWH45zc\",\n  \"bootstrap-3\": \"16Uiu2HAkwbtWw6HueqKdCK58oFKhfcpGL4bBJ4f6zndiD6mjmH4g\",\n  \"bootstrap-4\": \"16Uiu2HAm3rX7ZXyLo3FRNstXYWNZE55r8pRoXLzvSauNGEmkVLnh\",\n} as const;\n\nexport const BOOTSTRAP_PORTS = {\n  \"bootstrap-1\": \"14220\", // Port for us-east\n  \"bootstrap-2\": \"43343\", // Port for us-west\n  \"bootstrap-3\": \"37008\", // Update with actual port when you get it\n  \"bootstrap-4\": \"19293\", // Update with actual port when you get it\n} as const;\n\nexport function getBootstrapNodes() {\n  return Object.entries(BOOTSTRAP_PEER_IDS).map(\n    ([name, peerId]) =>\n      `/dns4/${BOOTSTRAP_URLS[name as keyof typeof BOOTSTRAP_URLS]}/tcp/${\n        BOOTSTRAP_PORTS[name as keyof typeof BOOTSTRAP_PORTS]\n      }/p2p/${peerId}`\n  );\n}\n\nexport async function getBootstrapKey(agentName: string): Promise<PrivateKey> {\n  const privateKey = process.env.BOOTSTRAP_PRIVATE_KEY;\n\n  if (!privateKey) {\n    throw new Error(\"Missing environment variable BOOTSTRAP_PRIVATE_KEY\");\n  }\n\n  try {\n    const privateKeyBytes = uint8ArrayFromString(privateKey, \"base64pad\");\n    return await privateKeyFromProtobuf(privateKeyBytes);\n  } catch (error) {\n    throw new Error(\n      `Failed to decode bootstrap key for ${agentName}: ${error}`\n    );\n  }\n}\n"]}