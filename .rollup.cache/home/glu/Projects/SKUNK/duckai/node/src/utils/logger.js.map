{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,aAAa,CAAC;AAC7B,OAAO,IAAI,MAAM,MAAM,CAAC;AAgBxB,MAAM,OAAO,MAAM;IACT,MAAM,CAAC,WAAW,GAAiB,EAAE,CAAC;IACtC,MAAM,CAAC,OAAO,GAAkB,IAAI,CAAC;IACrC,MAAM,CAAC,WAAW,GAAY,KAAK,CAAC;IAE5C,MAAM,CAAC,KAAK,CAAC,IAAI,CACf,SAAiB,EACjB,UAAyB,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE;QAE3D,IAAI,CAAC;YACH,4CAA4C;YAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;YACpD,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAE7C,kCAAkC;YAClC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,MAAM,CAAC,CAAC;YAE1D,oCAAoC;YACpC,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,EAAE,CAAC,SAAS,CAChB,OAAO,EACP,uBAAuB,SAAS,OAAO,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,QAAQ,CACxE,CAAC;gBACF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACzB,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,4BAA4B;YAC5B,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;oBACrD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;oBAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;oBACvD,MAAM,OAAO,GAAG,IAAI,SAAS,MAAM,KAAK,MAAM,SAAS,KAAK,OAAO,GAAG,OAAO,EAAE,CAAC;oBAEhF,+CAA+C;oBAC/C,QAAQ,KAAK,EAAE,CAAC;wBACd,KAAK,OAAO;4BACV,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;4BACvB,MAAM;wBACR,KAAK,MAAM;4BACT,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACtB,MAAM;wBACR,KAAK,OAAO;4BACV,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;4BACvB,MAAM;wBACR;4BACE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACzB,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,0BAA0B;YAC1B,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;oBAC3D,IAAI,CAAC,IAAI,CAAC,OAAO;wBAAE,OAAO;oBAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;oBAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;oBACvD,MAAM,OAAO,GAAG,IAAI,SAAS,MAAM,KAAK,MAAM,SAAS,KAAK,OAAO,GAAG,OAAO,IAAI,CAAC;oBAElF,IAAI,CAAC;wBACH,MAAM,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;oBAC7C,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;oBACvD,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,qBAAqB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACnE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAAmB;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,gBAAgB;QACrB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAAmB;QACtC,8CAA8C;QAC9C,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC;gBACH,MAAM,EAAE,CAAC,UAAU,CACjB,IAAI,CAAC,OAAO,EACZ,oBAAoB,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,QAAQ,CACrD,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,GAAG,CACtB,KAAe,EACf,SAAiB,EACjB,OAAe,EACf,IAAU;QAEV,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO;QACT,CAAC;QAED,+BAA+B;QAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC;gBACH,MAAM,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACjD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAiB,EAAE,OAAe,EAAE,IAAU;QAC/D,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAiB,EAAE,OAAe,EAAE,IAAU;QAC9D,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAiB,EAAE,OAAe,EAAE,IAAU;QAC9D,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAiB,EAAE,OAAe,EAAE,IAAU;QAC/D,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC","sourcesContent":["import fs from \"fs/promises\";\nimport path from \"path\";\n\nexport type LogLevel = \"DEBUG\" | \"INFO\" | \"WARN\" | \"ERROR\";\n\ntype LogHandler = (\n  level: LogLevel,\n  namespace: string,\n  message: string,\n  meta?: any\n) => void;\n\ninterface LoggerOptions {\n  useStdout?: boolean;\n  useFile?: boolean;\n}\n\nexport class Logger {\n  private static logHandlers: LogHandler[] = [];\n  private static logFile: string | null = null;\n  private static initialized: boolean = false;\n\n  static async init(\n    agentName: string,\n    options: LoggerOptions = { useStdout: true, useFile: true }\n  ) {\n    try {\n      // Create logs directory if it doesn't exist\n      const logsDir = path.resolve(process.cwd(), \"logs\");\n      await fs.mkdir(logsDir, { recursive: true });\n\n      // Use agent name for the log file\n      const logPath = path.resolve(logsDir, `${agentName}.log`);\n\n      // Initialize the file with a header\n      if (options.useFile) {\n        await fs.writeFile(\n          logPath,\n          `=== Log started for ${agentName} at ${new Date().toISOString()} ===\\n`\n        );\n        this.logFile = logPath;\n      }\n\n      this.initialized = true;\n\n      // Set up stdout log handler\n      if (options.useStdout) {\n        this.addLogHandler((level, namespace, message, meta) => {\n          const timestamp = new Date().toISOString();\n          const metaStr = meta ? ` ${JSON.stringify(meta)}` : \"\";\n          const logLine = `[${timestamp}] [${level}] [${namespace}] ${message}${metaStr}`;\n\n          // Use different console methods based on level\n          switch (level) {\n            case \"ERROR\":\n              console.error(logLine);\n              break;\n            case \"WARN\":\n              console.warn(logLine);\n              break;\n            case \"DEBUG\":\n              console.debug(logLine);\n              break;\n            default:\n              console.log(logLine);\n          }\n        });\n      }\n\n      // Set up file log handler\n      if (options.useFile) {\n        this.addLogHandler(async (level, namespace, message, meta) => {\n          if (!this.logFile) return;\n\n          const timestamp = new Date().toISOString();\n          const metaStr = meta ? ` ${JSON.stringify(meta)}` : \"\";\n          const logLine = `[${timestamp}] [${level}] [${namespace}] ${message}${metaStr}\\n`;\n\n          try {\n            await fs.appendFile(this.logFile, logLine);\n          } catch (error) {\n            console.error(\"Failed to write to log file:\", error);\n          }\n        });\n      }\n\n      this.info(\"Logger\", \"Logging initialized\", { logPath, options });\n    } catch (error) {\n      console.error(\"Failed to initialize logger:\", error);\n      throw error;\n    }\n  }\n\n  static addLogHandler(handler: LogHandler) {\n    this.logHandlers.push(handler);\n  }\n\n  static clearLogHandlers() {\n    this.logHandlers = [];\n  }\n\n  static setLogHandler(handler: LogHandler) {\n    // Clear existing handlers and set the new one\n    this.clearLogHandlers();\n    this.addLogHandler(handler);\n  }\n\n  static async cleanup() {\n    if (this.logFile) {\n      try {\n        await fs.appendFile(\n          this.logFile,\n          `=== Log ended at ${new Date().toISOString()} ===\\n`\n        );\n      } catch (error) {\n        console.error(\"Failed to cleanup logger:\", error);\n      }\n    }\n  }\n\n  private static async log(\n    level: LogLevel,\n    namespace: string,\n    message: string,\n    meta?: any\n  ) {\n    if (!this.initialized) {\n      console.warn(\"Logger not initialized!\");\n      return;\n    }\n\n    // Call all registered handlers\n    for (const handler of this.logHandlers) {\n      try {\n        await handler(level, namespace, message, meta);\n      } catch (error) {\n        console.error(\"Handler failed:\", error);\n      }\n    }\n  }\n\n  static async debug(namespace: string, message: string, meta?: any) {\n    await this.log(\"DEBUG\", namespace, message, meta);\n  }\n\n  static async info(namespace: string, message: string, meta?: any) {\n    await this.log(\"INFO\", namespace, message, meta);\n  }\n\n  static async warn(namespace: string, message: string, meta?: any) {\n    await this.log(\"WARN\", namespace, message, meta);\n  }\n\n  static async error(namespace: string, message: string, meta?: any) {\n    await this.log(\"ERROR\", namespace, message, meta);\n  }\n}\n"]}