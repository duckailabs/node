{"version":3,"file":"p2p.js","sourceRoot":"","sources":["p2p.ts"],"names":[],"mappings":"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","sourcesContent":["import \"./polyfills\";\n\nimport { gossipsub } from \"@chainsafe/libp2p-gossipsub\";\nimport { noise } from \"@chainsafe/libp2p-noise\";\nimport { yamux } from \"@chainsafe/libp2p-yamux\";\nimport { identify } from \"@libp2p/identify\";\nimport type { PrivateKey } from \"@libp2p/interface\";\nimport { kadDHT } from \"@libp2p/kad-dht\";\nimport { peerIdFromString } from \"@libp2p/peer-id\";\nimport { tcp } from \"@libp2p/tcp\";\nimport { multiaddr, Multiaddr } from \"@multiformats/multiaddr\";\nimport { decrypt, encrypt } from \"eciesjs\";\nimport { EventEmitter } from \"events\";\nimport fs from \"fs/promises\";\nimport { createLibp2p } from \"libp2p\";\nimport secp256k1 from \"secp256k1\";\nimport { Chain, createPublicClient, createWalletClient, http } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport AgentRegistryABI from \"./abi/AgentRegistry.json\" assert { type: \"json\" };\nimport { BOOTSTRAP_PORTS, getBootstrapNodes } from \"./constants\";\nimport { NetworkName, networks } from \"./networks\";\nimport { Logger } from \"./utils/logger\";\nconst { publicKeyCreate } = secp256k1;\n\n/**\n * Metadata associated with an agent in the P2P network.\n * @interface AgentMetadata\n */\ninterface AgentMetadata {\n  /** Optional creator information */\n  creators?: string;\n  /** Optional token address associated with the agent */\n  tokenAddress?: string;\n}\n\n/**\n * Represents an agent's information from the registry contract.\n * @interface Agent\n */\ninterface Agent {\n  /** The name of the agent */\n  name: string;\n  /** JSON string containing agent metadata */\n  metadata: string;\n  /** Agent's reputation score */\n  reputation: bigint;\n  /** Whether the agent is currently active */\n  isActive: boolean;\n  /** Whether the agent is blocked */\n  isBlocked: boolean;\n  /** Timestamp of when the agent was registered */\n  registrationTime: bigint;\n}\n\n/**\n * Structure for encrypted message content.\n * @interface EncryptedMessage\n */\ninterface EncryptedMessage {\n  /** The encrypted content as a byte array */\n  encrypted: Uint8Array | number[];\n}\n\n/**\n * Structure for P2P messages exchanged between agents.\n * @interface P2PAgentMessage\n */\ninterface P2PAgentMessage {\n  /** Unique identifier for the message */\n  messageId: string;\n  /** Ethereum address of the sending agent */\n  fromAgentId: string;\n  /** Optional Ethereum address of the receiving agent */\n  toAgentId?: string;\n  /** Encrypted content of the message */\n  content: EncryptedMessage;\n  /** Unix timestamp of when the message was created */\n  timestamp: number;\n  /** Signature of the message content */\n  signature: string;\n  /** Optional conversation ID for threaded messages */\n  conversationId?: string;\n  /** Optional reference to a message being replied to */\n  replyTo?: string;\n  /** Nonce value for message uniqueness */\n  nonce: number;\n}\n\n/**\n * P2PNetwork class implements a decentralized peer-to-peer network using libp2p.\n * It provides functionality for agent discovery, message exchange, and network maintenance.\n * @extends EventEmitter\n */\nexport class P2PNetwork extends EventEmitter {\n  private node: any;\n  private account: any;\n  private knownPeers: Set<string> = new Set();\n  private registryContract: any;\n  private publicKey: Uint8Array;\n  private privateKey: string;\n  private useEncryption: boolean = false;\n  private chain: Chain;\n  private metrics = {\n    connectedPeers: 0,\n    messagesSent: 0,\n    messagesReceived: 0,\n    lastMessageTime: 0,\n    startTime: Date.now(),\n  };\n  private peerId: any;\n  private dht: any;\n  private bootstrapMode: boolean = false;\n  private updateInterval: ReturnType<typeof setInterval> | null = null;\n  private lastDHTUpdate: number = 0;\n  private readonly MIN_DHT_UPDATE_INTERVAL = 10_000; // 10 seconds instead of 60 seconds\n  private readonly MAX_CONNECTIONS = this.bootstrapMode ? 1000 : 50;\n  private bootstrapNodes: string[] = [];\n  private nodeStatuses: Map<string, any> = new Map();\n  private knownPeerToEthMap: Map<string, string> = new Map();\n  private knownAgentNames: Map<string, string> = new Map();\n\n  // Constants for DHT operations\n  private readonly DHT_OPERATION_TIMEOUT = 30000; // 30 seconds\n  private readonly DHT_GET_TIMEOUT = 10000; // 10 seconds\n  private readonly DHT_PUT_TIMEOUT = 20000; // 20 seconds\n\n  /**\n   * Creates a new P2PNetwork instance.\n   * @param {string} privateKey - Ethereum private key for the agent\n   * @param {string} agentName - Name of the agent\n   * @param {string} version - Version of the agent software\n   * @param {AgentMetadata} metadata - Additional metadata for the agent\n   * @param {string} registryAddress - Address of the agent registry contract\n   * @param {string} rpcUrl - URL of the Ethereum RPC endpoint\n   * @param {NetworkName} networkName - Name of the network (e.g., \"base\", \"mainnet\")\n   * @param {boolean} useEncryption - Whether to use message encryption\n   */\n  constructor(\n    privateKey: string,\n    private agentName: string,\n    private version: string,\n    private metadata: AgentMetadata,\n    private registryAddress: string = \"0x05430ECEc2E4D86736187B992873EA8D5e1f1e32\",\n    private rpcUrl: string = \"https://mainnet.base.org\",\n    private networkName: NetworkName = \"base\",\n    useEncryption = false\n  ) {\n    super();\n    this.useEncryption = useEncryption;\n    this.chain = networks[networkName];\n    this.privateKey = privateKey.replace(\"0x\", \"\");\n    this.account = privateKeyToAccount(`0x${this.privateKey}`);\n\n    // Initialize registry contract client\n    this.registryContract = createPublicClient({\n      chain: this.chain,\n      transport: http(this.rpcUrl),\n    });\n\n    const privKeyBuffer = Buffer.from(this.privateKey, \"hex\");\n    this.publicKey = publicKeyCreate(new Uint8Array(privKeyBuffer), false);\n\n    // Set bootstrap mode based on the agent's address, not the name\n    const bootstrapAddresses = getBootstrapNodes().map((node) => {\n      const [_, addr] = node.split(\"/p2p/\");\n      return addr;\n    });\n    this.bootstrapMode = bootstrapAddresses.includes(\n      this.account.address.toLowerCase()\n    );\n\n    // Set bootstrap nodes if we're not a bootstrap node\n    if (!this.bootstrapMode) {\n      this.bootstrapNodes = getBootstrapNodes();\n    }\n  }\n\n  /**\n   * Starts the P2P network node.\n   * Initializes the libp2p node with the appropriate configuration based on whether it's a bootstrap node or regular agent.\n   * Sets up DHT, pubsub, and connection handlers.\n   *\n   * @param {number} port - The port number to listen on\n   * @param {PrivateKey} [bootstrapKey] - Optional libp2p private key for bootstrap nodes\n   * @returns {Promise<any>} The initialized libp2p node\n   * @throws {Error} If node initialization fails\n   */\n  async start(port: number, bootstrapKey?: PrivateKey) {\n    try {\n      Logger.info(\"P2P\", \"🌟 Starting P2P node...\", {\n        agentName: this.agentName,\n        isBootstrap: this.agentName.startsWith(\"bootstrap-\"),\n        port,\n      });\n\n      // Create base options without sensitive data\n      const options: any = {\n        addresses: {\n          listen: [`/ip4/0.0.0.0/tcp/${port}`],\n          announce: [],\n        },\n        transports: [tcp()],\n        connectionEncrypters: [noise()],\n        streamMuxers: [yamux()],\n        services: {\n          pubsub: gossipsub({\n            allowPublishToZeroTopicPeers: true,\n            emitSelf: true,\n            heartbeatInterval: 1000,\n            directPeers: this.agentName.startsWith(\"bootstrap-\")\n              ? []\n              : this.bootstrapNodes.map((addr) => ({\n                  id: peerIdFromString(addr.split(\"/p2p/\")[1]),\n                  addrs: [multiaddr(addr)],\n                })),\n          }),\n          identify: identify(),\n          dht: kadDHT({\n            clientMode: !this.agentName.startsWith(\"bootstrap-\"),\n            protocol: \"/openpond/kad/1.0.0\",\n            maxInboundStreams: 5000,\n            maxOutboundStreams: 5000,\n            kBucketSize: this.agentName.startsWith(\"bootstrap-\") ? 200 : 20,\n            allowQueryWithZeroPeers: true,\n          }),\n        },\n        connectionManager: {\n          maxConnections: this.agentName.startsWith(\"bootstrap-\") ? 1000 : 50,\n          minConnections: this.agentName.startsWith(\"bootstrap-\") ? 3 : 1,\n          maxParallelDials: this.agentName.startsWith(\"bootstrap-\") ? 100 : 25,\n          dialTimeout: 30000,\n          autoDialInterval: 10000,\n        },\n      };\n\n      // If we're a bootstrap node, announce our public address\n      if (this.agentName.startsWith(\"bootstrap-\")) {\n        const port =\n          BOOTSTRAP_PORTS[this.agentName as keyof typeof BOOTSTRAP_PORTS];\n        const hostname =\n          this.agentName === \"bootstrap-1\"\n            ? \"us-east.hosting.openpond.ai\"\n            : this.agentName === \"bootstrap-2\"\n            ? \"us-west.hosting.openpond.ai\"\n            : this.agentName === \"bootstrap-3\"\n            ? \"eu-west.hosting.openpond.ai\"\n            : \"sea.hosting.openpond.ai\";\n\n        Logger.info(\n          \"P2P\",\n          `Bootstrap node announcing with hostname: ${hostname} and port: ${port}`\n        );\n        options.addresses.announce = [`/dns4/${hostname}/tcp/${port}`];\n\n        // Add bootstrap-specific DHT configuration\n        this.bootstrapMode = true;\n        Logger.info(\"P2P\", \"Running in bootstrap mode with DHT server enabled\");\n        options.addresses.announce = [`/dns4/${hostname}/tcp/${port}`];\n      }\n\n      if (bootstrapKey) {\n        options.privateKey = bootstrapKey;\n        Logger.info(\"P2P\", \"Using bootstrap libp2p key\");\n      }\n\n      // Create and start the node\n      Logger.info(\"P2P\", \"Creating libp2p node...\", options);\n      this.node = await createLibp2p(options);\n\n      if (!this.node) {\n        throw new Error(\"Failed to create libp2p node\");\n      }\n\n      Logger.info(\"P2P\", \"Starting libp2p node...\");\n      await this.node.start();\n      Logger.info(\"P2P\", \"libp2p node started successfully\", {\n        peerId: this.node.peerId.toString(),\n        multiaddrs: this.node.getMultiaddrs().map(String),\n      });\n      this.peerId = this.node.peerId;\n\n      // Set up pubsub\n      Logger.info(\"P2P\", \"Setting up pubsub...\");\n      await this.setupPubSub();\n      Logger.info(\"P2P\", \"Pubsub setup complete\");\n\n      if (this.bootstrapMode) {\n        // Start DHT server mode first for bootstrap nodes\n        Logger.info(\"P2P\", \"Starting DHT in bootstrap mode\");\n        try {\n          await this.node.services.dht.start();\n          Logger.info(\"P2P\", \"DHT bootstrap mode started successfully\", {\n            routingTableSize: this.node.services.dht.routingTable.size,\n          });\n        } catch (error) {\n          Logger.error(\"P2P\", \"Failed to start DHT in bootstrap mode\", {\n            error,\n          });\n          throw error;\n        }\n\n        // Then connect to other bootstrap nodes\n        await this.connectToBootstrapNodes();\n      } else {\n        // For regular nodes, wait for bootstrap connection\n        Logger.info(\"P2P\", \"Waiting for bootstrap connection...\");\n        await this.waitForBootstrapConnection();\n      }\n\n      // Start discovery and publish our DHT record\n      await this.startDiscovery();\n      await this.publishToDHT();\n\n      // Start periodic DHT maintenance\n      await this.startDHTMaintenance();\n\n      return this.node;\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to start node\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up the publish/subscribe system for the P2P network.\n   * Subscribes to various channels including agent announcements, messages, and node status.\n   * Sets up message handlers and starts periodic status broadcasts.\n   *\n   * @returns {Promise<void>}\n   * @throws {Error} If pubsub setup fails\n   */\n  public async setupPubSub() {\n    try {\n      // Subscribe to agent announcements\n      await this.node.services.pubsub.subscribe(\"agent-announcements\");\n      Logger.info(\"P2P\", \"Subscribed to agent-announcements\");\n\n      // Subscribe to agent messages\n      await this.node.services.pubsub.subscribe(\"agent-messages\");\n      Logger.info(\"P2P\", \"Subscribed to agent-messages\");\n\n      // Subscribe to node status\n      await this.node.services.pubsub.subscribe(\"node-status\");\n      Logger.info(\"P2P\", \"Subscribed to node-status\");\n\n      // Handle incoming messages\n      this.node.services.pubsub.addEventListener(\n        \"message\",\n        async (evt: any) => {\n          try {\n            const data = new TextDecoder().decode(evt.detail.data);\n            const messageWrapper = JSON.parse(data);\n\n            if (evt.detail.topic === \"agent-announcements\") {\n              if (messageWrapper && messageWrapper.message) {\n                await this.verifyAndProcessAnnouncement(messageWrapper.message);\n              }\n            } else if (evt.detail.topic === \"agent-messages\") {\n              if (messageWrapper && messageWrapper.message) {\n                await this.handleAgentMessage(messageWrapper.message);\n              }\n            }\n          } catch (error) {\n            Logger.error(\"P2P\", \"Failed to process pubsub message\", {\n              error,\n              topic: evt.detail.topic,\n            });\n          }\n        }\n      );\n\n      // Start periodic status broadcast with reduced frequency\n      await this.broadcastStatus();\n      setInterval(() => this.broadcastStatus(), 60_000);\n\n      // Announce our presence periodically and update DHT records\n      await this.announcePresence();\n      setInterval(async () => {\n        await this.announcePresence();\n        await this.updateDHTRecords();\n      }, 10_000); // Every 30 seconds\n\n      // Listen for new peer connections\n      this.node.addEventListener(\"peer:connect\", async (evt: any) => {\n        const peerId = evt.detail.toString();\n        Logger.info(\"P2P\", \"New peer connected\", { peerId });\n\n        // Try to get ETH address from DHT for this peer\n        const ethKey = `/eth/${peerId.toLowerCase()}`;\n        try {\n          for await (const event of this.node.services.dht.get(\n            new TextEncoder().encode(ethKey)\n          )) {\n            if (event.type === \"VALUE\") {\n              const record = JSON.parse(new TextDecoder().decode(event.value));\n              if (record.agentId) {\n                Logger.info(\"P2P\", \"Found ETH address for new peer\", {\n                  peerId,\n                  ethAddress: record.agentId,\n                });\n                this.knownPeerToEthMap.set(peerId, record.agentId);\n              }\n              break;\n            }\n          }\n        } catch (error) {\n          // Don't log DHT lookup failures\n        }\n\n        await this.updateDHTRecords();\n      });\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to setup pubsub\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Shares the list of known peers with the network.\n   * Broadcasts a list of known peer IDs and their corresponding Ethereum addresses.\n   * This helps maintain network connectivity and peer discovery.\n   *\n   * @returns {Promise<void>}\n   */\n  private async shareKnownPeers() {\n    try {\n      const peers = Array.from(this.knownPeerToEthMap.entries()).map(\n        ([peerId, ethAddress]) => ({\n          peerId,\n          ethAddress,\n          agentName: this.knownAgentNames.get(ethAddress.toLowerCase()),\n        })\n      );\n\n      if (peers.length > 0) {\n        const message = {\n          type: \"peer-list\",\n          peers,\n          timestamp: Date.now(),\n          fromBootstrap: this.bootstrapMode,\n        };\n\n        await this.node.services.pubsub.publish(\n          \"agent-announcements\",\n          new TextEncoder().encode(JSON.stringify(message))\n        );\n\n        Logger.info(\"P2P\", \"Shared known peers\", { peerCount: peers.length });\n      }\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to share known peers\", { error });\n    }\n  }\n\n  /**\n   * Verifies and processes an announcement from another agent.\n   * Validates the announcement, stores peer mappings, and attempts to establish connections.\n   *\n   * @param {any} announcement - The announcement message containing peer information\n   * @returns {Promise<boolean>} True if the announcement was processed successfully\n   */\n  private async verifyAndProcessAnnouncement(announcement: any) {\n    try {\n      const { peerId, agentId, agentName, multiaddrs } = announcement;\n      if (!peerId || !agentId || agentId === this.account.address) return false;\n\n      // Store the agent name mapping - use the actual agent name from the announcement\n      this.knownAgentNames.set(agentId.toLowerCase(), agentName);\n\n      // Log the mapping being stored\n      Logger.info(\"P2P\", \"Storing peer mapping from announcement\", {\n        peerId,\n        agentId,\n        agentName,\n      });\n\n      this.storePeerMapping(peerId, agentId);\n\n      // Try to connect if we have multiaddrs\n      if (Array.isArray(multiaddrs)) {\n        for (const addr of multiaddrs) {\n          try {\n            await this.node.dial(multiaddr(addr));\n            break;\n          } catch (err) {\n            continue;\n          }\n        }\n      }\n\n      return true;\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to verify announcement\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Handles incoming agent messages.\n   * Verifies message signatures, decrypts content if encryption is enabled,\n   * and emits the message event if it's intended for this agent.\n   *\n   * @param {P2PAgentMessage} message - The incoming P2P message\n   * @returns {Promise<void>}\n   */\n  private async handleAgentMessage(message: P2PAgentMessage) {\n    Logger.info(\"P2P\", \"Handling agent message\", {\n      fromAgentId: message.fromAgentId,\n      toAgentId: message.toAgentId,\n      messageId: message.messageId,\n    });\n\n    // Verify message signature\n    const isValid = await this.verifyMessage(message);\n    Logger.info(\"P2P\", \"Message signature verification: valid\", {\n      fromAgentId: message.fromAgentId,\n      messageId: message.messageId,\n    });\n\n    if (!isValid) {\n      Logger.warn(\"P2P\", \"Invalid message signature\", {\n        fromAgentId: message.fromAgentId,\n        messageId: message.messageId,\n      });\n      return;\n    }\n\n    if (!message.toAgentId) {\n      Logger.warn(\"P2P\", \"Message has no recipient\", {\n        fromAgentId: message.fromAgentId,\n        messageId: message.messageId,\n      });\n      return;\n    }\n\n    // Check if message is for us (case insensitive)\n    const normalizedToAddress = message.toAgentId.toLowerCase();\n    const normalizedMyAddress = this.account.address.toLowerCase();\n    const isForMe = normalizedToAddress === normalizedMyAddress;\n\n    Logger.info(\"P2P\", \"Checking message recipient\", {\n      toAgentId: message.toAgentId,\n      myAddress: this.account.address,\n      normalizedToAddress,\n      normalizedMyAddress,\n      isForMe,\n    });\n\n    if (isForMe) {\n      Logger.info(\"P2P\", \"Message is for me, decrypting\", {\n        messageId: message.messageId,\n      });\n\n      try {\n        let decryptedContent: string;\n        // Convert the numbered object format to Uint8Array\n        const contentArray = Object.values(\n          message.content.encrypted\n        ) as number[];\n        const contentBytes = new Uint8Array(contentArray);\n\n        // Always try to decrypt first\n        try {\n          Logger.info(\"P2P\", \"Message is encrypted, decrypting\");\n          const decrypted = await decrypt(this.privateKey, contentBytes);\n          decryptedContent = new TextDecoder().decode(\n            new Uint8Array(decrypted)\n          );\n        } catch (decryptError) {\n          // If decryption fails, treat as unencrypted\n          Logger.info(\"P2P\", \"Message was not encrypted\");\n          decryptedContent = new TextDecoder().decode(contentBytes);\n        }\n\n        // Create decrypted message object\n        const decryptedMessage = {\n          messageId: message.messageId,\n          fromAgentId: message.fromAgentId,\n          toAgentId: message.toAgentId,\n          content: decryptedContent,\n          timestamp: message.timestamp,\n        };\n\n        Logger.info(\"P2P\", \"Emitting decrypted message\", {\n          messageId: message.messageId,\n          content: decryptedContent,\n        });\n\n        // Emit decrypted message event\n        this.emit(\"message\", decryptedMessage);\n        this.metrics.messagesReceived++;\n      } catch (error) {\n        Logger.error(\"P2P\", \"Failed to process message\", {\n          error,\n          messageId: message.messageId,\n        });\n      }\n    } else {\n      Logger.info(\"P2P\", \"Message is not for me, ignoring\", {\n        messageId: message.messageId,\n      });\n    }\n  }\n\n  /**\n   * Verifies if an agent is registered and not blocked in the registry contract.\n   *\n   * @param {string} agentId - Ethereum address of the agent to verify\n   * @returns {Promise<boolean>} True if the agent is registered and not blocked\n   */\n  private async verifyAgentRegistration(agentId: string): Promise<boolean> {\n    try {\n      // Check if this Ethereum address is registered and not blocked\n      const isRegistered = await this.registryContract.readContract({\n        address: this.registryAddress,\n        abi: AgentRegistryABI,\n        functionName: \"isRegistered\",\n        args: [agentId],\n      });\n\n      if (!isRegistered) {\n        console.warn(`Unregistered agent attempted connection: ${agentId}`);\n        return false;\n      }\n\n      // Then get full agent info to check blocked status\n      const agentInfo: Agent = await this.registryContract.readContract({\n        address: this.registryAddress,\n        abi: AgentRegistryABI,\n        functionName: \"getAgentInfo\",\n        args: [agentId],\n      });\n\n      if (agentInfo.isBlocked) {\n        console.warn(`Blocked agent attempted connection: ${agentId}`);\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      console.error(\"Error verifying agent registration:\", err);\n      return false;\n    }\n  }\n\n  /**\n   * Registers the agent with the registry contract on the blockchain.\n   * If the agent is already registered, the function returns early.\n   * Includes the agent's public key in the metadata for message encryption.\n   *\n   * @returns {Promise<string|void>} Transaction hash if registration was successful\n   * @throws {Error} If registration fails for reasons other than already being registered\n   */\n  async registerWithContract() {\n    try {\n      // First check if already registered\n      const isRegistered = await this.registryContract.readContract({\n        address: this.registryAddress,\n        abi: AgentRegistryABI,\n        functionName: \"isRegistered\",\n        args: [this.account.address],\n      });\n\n      if (isRegistered) {\n        Logger.info(\"P2P\", \"Agent already registered\");\n        return;\n      }\n\n      const walletClient = createWalletClient({\n        account: this.account,\n        chain: this.chain,\n        transport: http(this.rpcUrl),\n      });\n\n      // Format metadata as a proper JSON string\n      const metadataWithKey = JSON.stringify({\n        ...this.metadata,\n        publicKey: Buffer.from(this.publicKey).toString(\"hex\"),\n      });\n\n      Logger.info(\"P2P\", \"Registering agent\", {\n        name: this.agentName,\n        metadata: metadataWithKey,\n      });\n\n      const hash = await walletClient.writeContract({\n        address: this.registryAddress as `0x${string}`,\n        abi: AgentRegistryABI,\n        functionName: \"registerAgent\",\n        args: [this.agentName, metadataWithKey],\n        account: this.account,\n      });\n\n      Logger.info(\"P2P\", \"Registration transaction sent\", { hash });\n\n      // Wait for transaction confirmation\n      const publicClient = createPublicClient({\n        chain: this.chain,\n        transport: http(this.rpcUrl),\n      });\n\n      await publicClient.waitForTransactionReceipt({ hash });\n      Logger.info(\"P2P\", \"Registration confirmed\");\n\n      return hash;\n    } catch (error) {\n      if (\n        error instanceof Error &&\n        error.message?.includes(\"AgentAlreadyRegistered\")\n      ) {\n        Logger.info(\"P2P\", \"Agent already registered\");\n        return;\n      }\n      Logger.error(\"P2P\", \"Failed to register agent\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Sends a message to a specific agent in the network.\n   * Handles peer discovery, message encryption, and signature generation.\n   * Messages are broadcast through the pubsub system.\n   *\n   * @param {string} toAgentId - Ethereum address of the recipient\n   * @param {string} content - Message content to send\n   * @param {string} [conversationId] - Optional ID for threaded conversations\n   * @param {string} [replyTo] - Optional ID of the message being replied to\n   * @returns {Promise<string>} Message ID of the sent message\n   * @throws {Error} If the recipient's PeerId cannot be found or message sending fails\n   */\n  async sendMessage(\n    toAgentId: string,\n    content: string,\n    conversationId?: string,\n    replyTo?: string\n  ) {\n    try {\n      // Log current known peers for debugging\n      Logger.info(\"P2P\", \"Current known peer mappings\", {\n        knownPeers: Object.fromEntries(this.knownPeerToEthMap.entries()),\n      });\n\n      // Automatically lookup PeerId from Ethereum address\n      const targetPeerId = await this.lookupPeerIdByAddress(toAgentId);\n      Logger.info(\"P2P\", \"Looked up target peer\", {\n        toAgentId,\n        targetPeerId,\n        myAddress: this.account.address,\n      });\n\n      if (!targetPeerId) {\n        // Try to get it from connected peers first\n        const connectedPeers = this.node.getPeers();\n        Logger.info(\"P2P\", \"Looking up peer in connected peers\", {\n          toAgentId,\n          connectedPeers: connectedPeers.map(String),\n        });\n\n        // If we can't find the PeerId, throw error\n        throw new Error(`Could not find PeerId for address ${toAgentId}`);\n      }\n\n      // Try to establish direct connection if not already connected\n      try {\n        const peer = await this.node.peerStore.get(targetPeerId);\n        if (!peer) {\n          Logger.info(\"P2P\", \"Attempting to establish direct connection\", {\n            targetPeerId,\n            multiaddrs: this.node.getMultiaddrs().map(String),\n          });\n\n          // Get peer's multiaddrs if available\n          const peerMultiaddrs = await this.node.peerStore.addressBook.get(\n            targetPeerId\n          );\n          if (peerMultiaddrs && peerMultiaddrs.length > 0) {\n            Logger.info(\"P2P\", \"Found peer multiaddrs\", {\n              targetPeerId,\n              multiaddrs: peerMultiaddrs.map(String),\n            });\n          }\n\n          await this.node.dial(targetPeerId);\n          Logger.info(\"P2P\", \"Successfully established direct connection\", {\n            targetPeerId,\n          });\n        }\n      } catch (error) {\n        Logger.warn(\"P2P\", \"Failed to establish direct connection\", {\n          targetPeerId,\n          error,\n        });\n        // Continue anyway as message might route through other peers\n      }\n\n      let encryptedContent: EncryptedMessage;\n\n      if (this.useEncryption) {\n        const recipientPublicKey = await this.getPublicKeyFromContract(\n          toAgentId\n        );\n        const contentBytes = new TextEncoder().encode(content);\n        const encrypted = await encrypt(recipientPublicKey, contentBytes);\n        encryptedContent = { encrypted: new Uint8Array(encrypted) };\n        Logger.info(\"P2P\", \"Message encrypted successfully\");\n      } else {\n        const contentBytes = Array.from(new TextEncoder().encode(content));\n        encryptedContent = { encrypted: contentBytes };\n        Logger.info(\"P2P\", \"Message prepared (unencrypted mode)\");\n      }\n\n      const messageData = {\n        messageId: `${this.account.address}-${Date.now()}-${Math.random()\n          .toString(36)\n          .slice(2)}`,\n        fromAgentId: this.account.address,\n        toAgentId,\n        content: encryptedContent,\n        timestamp: Date.now(),\n        nonce: Date.now(),\n      };\n\n      Logger.info(\"P2P\", \"Preparing to send message\", {\n        messageId: messageData.messageId,\n        fromAgentId: messageData.fromAgentId,\n        toAgentId: messageData.toAgentId,\n      });\n\n      const signature = await this.signMessage(messageData);\n      const message: P2PAgentMessage = { ...messageData, signature };\n\n      Logger.info(\"P2P\", \"Publishing message to pubsub\", {\n        topic: \"agent-messages\",\n        messageId: message.messageId,\n      });\n\n      // Wrap the message in the expected format\n      const wrappedMessage = { message };\n      await this.node.services.pubsub.publish(\n        \"agent-messages\",\n        new TextEncoder().encode(JSON.stringify(wrappedMessage))\n      );\n\n      Logger.info(\"P2P\", \"Message published successfully\", {\n        messageId: message.messageId,\n      });\n\n      this.metrics.messagesSent++;\n\n      return message.messageId;\n    } catch (error) {\n      Logger.error(\"P2P\", \"Error sending message\", { error, toAgentId });\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves an agent's public key from their metadata in the registry contract.\n   *\n   * @param {string} address - Ethereum address of the agent\n   * @returns {Promise<Uint8Array>} The agent's public key as a byte array\n   * @throws {Error} If the public key cannot be retrieved or decoded\n   */\n  private async getPublicKeyFromContract(address: string): Promise<Uint8Array> {\n    try {\n      const agentInfo = await this.registryContract.readContract({\n        address: this.registryAddress,\n        abi: AgentRegistryABI,\n        functionName: \"getAgentInfo\",\n        args: [address],\n      });\n\n      const metadata = JSON.parse(agentInfo.metadata);\n      return new Uint8Array(Buffer.from(metadata.publicKey, \"hex\"));\n    } catch (error) {\n      console.error(\"Error getting public key:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Returns the Ethereum address of this agent.\n   *\n   * @returns {string} The agent's Ethereum address\n   */\n  getAddress(): string {\n    return this.account.address;\n  }\n\n  /**\n   * Returns a list of known peer IDs in the network.\n   *\n   * @returns {string[]} Array of peer IDs\n   */\n  getPeers(): string[] {\n    return Array.from(this.knownPeers);\n  }\n\n  /**\n   * Establishes connections to bootstrap nodes.\n   * For bootstrap nodes, connects to other bootstrap nodes.\n   * For regular agents, attempts to connect to all bootstrap nodes.\n   * Also sets up periodic DHT status checks for bootstrap nodes.\n   *\n   * @returns {Promise<void>}\n   */\n  private async connectToBootstrapNodes() {\n    if (!this.bootstrapMode) {\n      Logger.info(\"P2P\", \"Connecting to bootstrap nodes\");\n\n      for (const addr of this.bootstrapNodes) {\n        try {\n          await this.node.dial(multiaddr(addr));\n          Logger.info(\"P2P\", \"Connected to bootstrap node\", { addr });\n        } catch (err) {\n          Logger.warn(\"P2P\", \"Failed to connect to bootstrap node\", {\n            addr,\n            error: err,\n          });\n        }\n      }\n      return;\n    }\n\n    // For bootstrap nodes, connect to other bootstrap nodes\n    Logger.info(\"P2P\", \"Bootstrap node connecting to peers\", {\n      addresses: this.bootstrapNodes.filter(\n        (addr) => !addr.includes(this.node.peerId.toString())\n      ),\n    });\n\n    for (const addr of this.bootstrapNodes) {\n      if (!addr.includes(this.node.peerId.toString())) {\n        try {\n          await this.node.dial(multiaddr(addr));\n          Logger.info(\"P2P\", \"Connected to peer\", { addr });\n        } catch (err) {\n          Logger.warn(\"P2P\", \"Failed to connect to peer\", {\n            addr,\n            error: err,\n          });\n        }\n      }\n    }\n\n    // Start periodic DHT check for bootstrap nodes\n    setInterval(async () => {\n      try {\n        // Get all DHT records\n        const records = await this.getDHTRecords();\n\n        Logger.info(\"P2P\", \"Bootstrap DHT Status\", {\n          routingTableSize: this.node.services.dht.routingTable.size,\n          connectedPeers: this.node.getPeers().length,\n          dhtRecords: records,\n          myPeerId: this.node.peerId.toString(),\n          myAddress: this.account.address,\n        });\n      } catch (error) {\n        Logger.error(\"P2P\", \"Bootstrap DHT check failed\", { error });\n      }\n    }, 30_000);\n  }\n\n  /**\n   * Retrieves all known peer records from the DHT.\n   * Combines information from connected peers and local peer mappings.\n   * Used for network discovery and peer tracking.\n   *\n   * @returns {Promise<Record<string, any>>} Object mapping Ethereum addresses to peer information\n   */\n  public async getDHTRecords(): Promise<Record<string, any>> {\n    const records: Record<string, any> = {};\n    try {\n      // Get all connected peers\n      const peers = this.node.getPeers();\n      Logger.info(\"P2P\", \"Finding peers in network\", {\n        peerCount: peers.length,\n        type: this.bootstrapMode ? \"bootstrap\" : \"agent\",\n      });\n\n      // Use our local known peer mappings\n      for (const [peerId, ethAddr] of this.knownPeerToEthMap.entries()) {\n        const lowercaseAddr = ethAddr.toLowerCase();\n        records[lowercaseAddr] = {\n          peerId,\n          timestamp: Date.now(),\n          agentId: ethAddr,\n          agentName:\n            this.knownAgentNames.get(lowercaseAddr) ||\n            `Agent ${ethAddr.slice(0, 6)}`,\n        };\n      }\n\n      Logger.info(\"P2P\", \"Network Peer Discovery Complete\", {\n        recordCount: Object.keys(records).length,\n        type: this.bootstrapMode ? \"bootstrap\" : \"agent\",\n        routingTableSize: this.node.services.dht.routingTable.size,\n      });\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to discover peers\", { error });\n    }\n    return records;\n  }\n\n  /**\n   * Waits for the DHT to be ready and functional.\n   * Tests DHT functionality by attempting to put and get a test value.\n   * Ensures connection to bootstrap nodes before proceeding.\n   *\n   * @returns {Promise<void>}\n   * @throws {Error} If DHT is not ready after maximum attempts\n   */\n  private async waitForDHT(): Promise<void> {\n    const maxAttempts = 10;\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        // Check if we're connected to any bootstrap nodes\n        const connectedPeers = this.node.getPeers();\n        const connectedToBootstrap = this.bootstrapNodes.some((addr) =>\n          connectedPeers.some((peer: { toString: () => string }) =>\n            addr.includes(peer.toString())\n          )\n        );\n\n        if (!connectedToBootstrap) {\n          Logger.warn(\n            \"P2P\",\n            \"Not connected to any bootstrap nodes, retrying...\"\n          );\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n          continue;\n        }\n\n        // Try to put and get a test value in DHT\n        const testKey = `/test/${this.node.peerId.toString()}`;\n        const testValue = new TextEncoder().encode(\n          JSON.stringify({ timestamp: Date.now() })\n        );\n\n        try {\n          await this.node.services.dht.put(testKey, testValue);\n          const retrieved = await this.node.services.dht.get(testKey);\n\n          if (retrieved instanceof Uint8Array) {\n            Logger.info(\"P2P\", \"DHT is ready\", {\n              connectedPeers: connectedPeers.length,\n              bootstrapConnections: this.bootstrapNodes.filter((addr) =>\n                connectedPeers.some((peer: { toString: () => string }) =>\n                  addr.includes(peer.toString())\n                )\n              ),\n            });\n            return;\n          }\n        } catch (err) {\n          Logger.warn(\"P2P\", \"DHT test failed\", { error: err, attempt: i + 1 });\n        }\n\n        Logger.warn(\"P2P\", \"DHT not ready yet\", {\n          attempt: i + 1,\n          maxAttempts,\n          connectedPeers: connectedPeers.length,\n        });\n      } catch (err) {\n        Logger.warn(\"P2P\", \"Error checking DHT readiness\", {\n          error: err,\n          attempt: i + 1,\n        });\n      }\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n    throw new Error(\"DHT not ready after maximum attempts\");\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      uptime: Date.now() - this.metrics.startTime,\n      peersCount: this.knownPeers.size,\n    };\n  }\n\n  // Getter for libp2p node\n  getLibp2p() {\n    return this.node;\n  }\n\n  /**\n   * Publishes this agent's information to the DHT network.\n   * Announces presence via both DHT and pubsub for redundancy.\n   * Includes agent's multiaddrs for direct connection capability.\n   *\n   * @returns {Promise<void>}\n   */\n  private async publishToDHT() {\n    try {\n      // Provide our ETH address to the DHT network\n      const ethKey = `/eth/${this.account.address.toLowerCase()}`;\n      const encodedKey = new TextEncoder().encode(ethKey);\n\n      try {\n        // Use DHT's provide mechanism for peer discovery\n        for await (const result of this.node.services.dht.provide(encodedKey)) {\n          if (result.type === \"FINAL_PEER\") {\n            Logger.info(\"P2P\", \"Successfully provided presence to DHT\");\n          }\n        }\n      } catch (err) {\n        Logger.error(\"P2P\", \"Failed to provide to DHT\", { error: err });\n      }\n\n      // Announce via pubsub for immediate peer updates\n      const announcement = {\n        peerId: this.node.peerId.toString(),\n        timestamp: Date.now(),\n        agentId: this.account.address,\n        agentName: this.agentName,\n        multiaddrs: this.node\n          .getMultiaddrs()\n          .map((addr: Multiaddr) => addr.toString()),\n        isBootstrap: this.bootstrapMode,\n      };\n\n      await this.node.services.pubsub.publish(\n        \"agent-announcements\",\n        new TextEncoder().encode(JSON.stringify({ message: announcement }))\n      );\n\n      Logger.info(\"P2P\", \"Published presence to network\");\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to publish to network\", { error });\n    }\n  }\n\n  /**\n   * Looks up a peer's libp2p ID using their Ethereum address.\n   * First checks local mappings, then queries the DHT if not found locally.\n   *\n   * @param {string} ethAddress - Ethereum address to look up\n   * @returns {Promise<string|null>} The peer's libp2p ID if found, null otherwise\n   */\n  private async lookupPeerIdByAddress(\n    ethAddress: string\n  ): Promise<string | null> {\n    try {\n      // First check our local known peers mapping\n      const knownPeers = this.getKnownPeers();\n      for (const [peerId, addr] of knownPeers.entries()) {\n        if (addr.toLowerCase() === ethAddress.toLowerCase()) {\n          Logger.info(\"P2P\", \"Found peer in local mapping\", {\n            ethAddress,\n            peerId,\n          });\n          return peerId;\n        }\n      }\n\n      // If not found locally, use DHT's findProviders\n      const ethKey = `/eth/${ethAddress.toLowerCase()}`;\n      const encodedKey = new TextEncoder().encode(ethKey);\n\n      for await (const event of this.node.services.dht.findProviders(\n        encodedKey\n      )) {\n        if (event.type === \"PROVIDER\") {\n          const peerId = event.provider.toString();\n          Logger.info(\"P2P\", \"Found peer via DHT\", {\n            ethAddress,\n            peerId,\n          });\n          // Store in local mapping for future lookups\n          this.storePeerMapping(peerId, ethAddress);\n          return peerId;\n        }\n      }\n\n      Logger.info(\"P2P\", \"No peer found for address in DHT\", {\n        ethAddress,\n      });\n      return null;\n    } catch (error) {\n      Logger.error(\"P2P\", \"DHT lookup failed\", { error, ethAddress });\n      return null;\n    }\n  }\n\n  /**\n   * Gracefully stops the P2P network node.\n   * Clears update intervals and stops the libp2p node.\n   *\n   * @returns {Promise<void>}\n   */\n  async stop() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n    if (this.node) {\n      await this.node.stop();\n    }\n  }\n\n  /**\n   * Verifies that a bootstrap node is using the correct peer ID.\n   * Loads the expected peer ID from the bootstrap keys file and compares it with the current node's peer ID.\n   * Only applicable for bootstrap nodes.\n   *\n   * @returns {Promise<void>}\n   * @throws {Error} If the peer ID verification fails or bootstrap key cannot be loaded\n   */\n  private async verifyBootstrapNode() {\n    if (this.bootstrapMode) {\n      try {\n        const keyData = JSON.parse(\n          await fs.readFile(\n            `./bootstrap-keys/${this.agentName}-peer.json`,\n            \"utf8\"\n          )\n        );\n\n        const currentPeerId = this.node.peerId.toString();\n        Logger.info(\"P2P\", \"Verifying bootstrap node PeerId\", {\n          expected: keyData.id,\n          actual: currentPeerId,\n        });\n\n        if (currentPeerId !== keyData.id) {\n          throw new Error(\n            `Invalid PeerId for bootstrap node. Expected ${keyData.id}, got ${currentPeerId}`\n          );\n        }\n      } catch (error) {\n        throw new Error(\n          `Failed to load bootstrap key for ${this.agentName}: ${error}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Signs a message using the agent's Ethereum private key.\n   * Used to ensure message authenticity and prevent tampering.\n   *\n   * @param {Omit<P2PAgentMessage, \"signature\">} message - Message to sign\n   * @returns {Promise<`0x${string}`>} Ethereum signature of the message\n   */\n  private async signMessage(\n    message: Omit<P2PAgentMessage, \"signature\">\n  ): Promise<`0x${string}`> {\n    const walletClient = createWalletClient({\n      account: this.account,\n      chain: this.chain,\n      transport: http(this.rpcUrl),\n    });\n    return await walletClient.signMessage({\n      message: JSON.stringify(message),\n      account: this.account,\n    });\n  }\n\n  /**\n   * Verifies a message's signature to ensure it was sent by the claimed sender.\n   *\n   * @param {P2PAgentMessage} message - Message to verify\n   * @returns {Promise<boolean>} True if the signature is valid\n   */\n  private async verifyMessage(message: P2PAgentMessage): Promise<boolean> {\n    const { signature, ...rest } = message;\n    const publicClient = createPublicClient({\n      chain: this.chain,\n      transport: http(this.rpcUrl),\n    });\n    return await publicClient.verifyMessage({\n      address: message.fromAgentId as `0x${string}`,\n      message: JSON.stringify(rest),\n      signature: signature as `0x${string}`,\n    });\n  }\n\n  /**\n   * Handles new peer connections to the network.\n   * Enforces connection limits and drops excess connections.\n   *\n   * @param {any} connection - The new connection object\n   * @returns {Promise<void>}\n   */\n  private async handleNewConnection(connection: any) {\n    const currentConnections = this.node.getConnections().length;\n    if (currentConnections > this.MAX_CONNECTIONS) {\n      Logger.warn(\"P2P\", \"Connection limit reached, dropping connection\");\n      await connection.close();\n      return;\n    }\n  }\n\n  /**\n   * Retrieves a list of all connected agents in the network.\n   * Queries the DHT for agent information and maps peer IDs to Ethereum addresses.\n   *\n   * @returns {Promise<Array<{ id: string; address: string }>>} Array of connected agents\n   */\n  async getConnectedAgents(): Promise<Array<{ id: string; address: string }>> {\n    try {\n      const agents = new Map<string, { id: string; address: string }>();\n      this.emit(\"log\", \"🔍 Querying DHT for agents...\");\n\n      // Query all peers in our DHT routing table\n      const peers = this.node.getPeers();\n      for (const peer of peers) {\n        try {\n          // Try to get ETH address for each peer\n          const value = await this.node.services.dht.get(\n            `/eth-addresses/${peer.toString().toLowerCase()}`\n          );\n          if (value) {\n            const address = new TextDecoder().decode(value);\n            agents.set(address, {\n              id: peer.toString(),\n              address,\n            });\n            this.emit(\n              \"log\",\n              `✅ Found agent: ${address} (${peer\n                .toString()\n                .substring(0, 10)}...)`\n            );\n          }\n        } catch (err) {\n          // Skip peers without ETH address records\n          continue;\n        }\n      }\n\n      this.emit(\"log\", `✨ Found ${agents.size} agents`);\n      return Array.from(agents.values());\n    } catch (error) {\n      this.emit(\"log\", `🚫 Agent query failed: ${(error as Error).message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Waits for a successful connection to at least one bootstrap node.\n   * Polls the connection status every second until connected.\n   *\n   * @returns {Promise<void>}\n   */\n  public async waitForBootstrapConnection(): Promise<void> {\n    return new Promise((resolve) => {\n      const check = setInterval(() => {\n        const peers = this.node.getPeers();\n        if (peers.length > 0) {\n          clearInterval(check);\n          resolve();\n        }\n      }, 1000);\n    });\n  }\n\n  /**\n   * Broadcasts the node's current status to the network.\n   * Includes metrics, connected peers, and other node information.\n   *\n   * @returns {Promise<void>}\n   */\n  private async broadcastStatus() {\n    try {\n      const statusData = {\n        messageId: `status-${this.account.address}-${Date.now()}`,\n        fromAgentId: this.account.address,\n        content: {\n          encrypted: new TextEncoder().encode(\n            JSON.stringify({\n              peerId: this.node.peerId.toString(),\n              metrics: {\n                connectedPeers: this.node.getPeers().length,\n                messagesSent: this.metrics.messagesSent,\n                messagesReceived: this.metrics.messagesReceived,\n                uptime: process.uptime(),\n                memory: process.memoryUsage(),\n                dhtSize: this.node.services.dht.routingTable.size,\n                multiaddrs: this.node.getMultiaddrs().map(String),\n                isBootstrap: this.agentName.startsWith(\"bootstrap-\"),\n                lastMessageTime: this.metrics.lastMessageTime,\n              },\n            })\n          ),\n        },\n        timestamp: Date.now(),\n        nonce: Date.now(),\n      };\n\n      const signature = await this.signMessage(statusData);\n      const signedStatus = { ...statusData, signature };\n\n      await this.node.services.pubsub.publish(\n        \"node-status\",\n        new TextEncoder().encode(JSON.stringify(signedStatus))\n      );\n\n      Logger.info(\"P2P\", \"Published node status\");\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to broadcast status\", { error });\n    }\n  }\n\n  /**\n   * Handles status updates received from other nodes.\n   * Verifies the status message signature and stores the latest status.\n   *\n   * @param {any} status - Status update message\n   * @returns {Promise<void>}\n   */\n  private async handleStatusUpdate(status: any) {\n    try {\n      // Verify signature\n      const isValid = await this.verifyMessage(status);\n      if (!isValid) {\n        Logger.warn(\"P2P\", \"Received status update with invalid signature\", {\n          fromAgentId: status.agentId,\n        });\n        return;\n      }\n\n      // Store latest status\n      this.nodeStatuses.set(status.agentId, {\n        ...status,\n        receivedAt: Date.now(),\n      });\n\n      // Emit status update event\n      this.emit(\"status-update\", status);\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to handle status update\", { error });\n    }\n  }\n\n  /**\n   * Returns the current network status including all node statuses.\n   * Cleans up old status entries older than 2 minutes.\n   *\n   * @returns {Array<any>} Array of node status objects\n   */\n  public getNetworkStatus(): Array<any> {\n    // Clean up old statuses (older than 2 minutes)\n    const now = Date.now();\n    for (const [agentId, status] of this.nodeStatuses.entries()) {\n      if (now - status.receivedAt > 120_000) {\n        this.nodeStatuses.delete(agentId);\n      }\n    }\n\n    return Array.from(this.nodeStatuses.values());\n  }\n\n  /**\n   * Starts the peer discovery process.\n   * For bootstrap nodes, connects to other bootstrap nodes.\n   * For regular nodes, ensures connection to at least one bootstrap node.\n   *\n   * @returns {Promise<void>}\n   * @throws {Error} If unable to connect to any bootstrap nodes\n   */\n  public async startDiscovery() {\n    // Bootstrap nodes should connect to each other and share records\n    if (this.agentName.startsWith(\"bootstrap-\")) {\n      const otherBootstrapNodes = getBootstrapNodes().filter(\n        (addr) => !addr.includes(this.node.peerId.toString())\n      );\n\n      Logger.info(\"P2P\", \"Connecting to other bootstrap nodes\", {\n        addresses: otherBootstrapNodes,\n      });\n\n      // Try to connect to each bootstrap node multiple times\n      for (const addr of otherBootstrapNodes) {\n        let connected = false;\n        for (let attempt = 1; attempt <= 3 && !connected; attempt++) {\n          try {\n            // Use dns4 instead of ip4 to handle hostname resolution\n            const dnsAddr = addr.replace(\"/ip4/\", \"/dns4/\");\n            await this.node.dial(multiaddr(dnsAddr), {\n              signal: AbortSignal.timeout(10000), // 10 second timeout\n            });\n\n            // Extract peerId and store mapping for other bootstrap node\n            const peerId = addr.split(\"/p2p/\")[1];\n            // Each bootstrap node's ETH address is in their multiaddr\n            const bootstrapAddrs = {\n              \"bootstrap-1\": \"0xb9AE5BEDEE9768A9347798BD69bd9FCF6E557ab1\",\n              \"bootstrap-2\": \"0x87886dd580de7daae4bc0a204a50a73f89281b28\",\n              \"bootstrap-3\": \"0x1d1c89b79fc02bbc6f56c256e8ab5c4db890b2c3\",\n              \"bootstrap-4\": \"0x4d1c89b79fc02bbc6f56c256e8ab5c4db890b2c4\",\n            };\n\n            // Find which bootstrap node this is\n            const bootstrapNum = Object.entries(bootstrapAddrs).find(\n              ([name, _]) => addr.includes(name.replace(\"bootstrap-\", \"us-\"))\n            )?.[0];\n\n            if (\n              bootstrapNum &&\n              bootstrapAddrs[bootstrapNum as keyof typeof bootstrapAddrs]\n            ) {\n              const ethAddr =\n                bootstrapAddrs[bootstrapNum as keyof typeof bootstrapAddrs];\n              this.knownPeerToEthMap.set(peerId, ethAddr);\n\n              // Also store in DHT\n              const key = `/eth/${ethAddr.toLowerCase()}`;\n              const record = {\n                peerId,\n                timestamp: Date.now(),\n                agentId: ethAddr,\n                agentName: this.agentName,\n                multiaddrs: [addr],\n              };\n              await this.node.services.dht.put(\n                key,\n                new TextEncoder().encode(JSON.stringify(record))\n              );\n\n              Logger.info(\n                \"P2P\",\n                `Connected to and stored bootstrap node ${bootstrapNum}`,\n                {\n                  peerId,\n                  ethAddr,\n                  multiaddr: addr,\n                }\n              );\n            }\n\n            connected = true;\n          } catch (error) {\n            Logger.warn(\n              \"P2P\",\n              `Failed to connect to bootstrap node ${addr} (attempt ${attempt}/3)`,\n              { error }\n            );\n            if (attempt < 3) {\n              await new Promise((resolve) => setTimeout(resolve, 5000));\n            }\n          }\n        }\n      }\n\n      // Start DHT in bootstrap mode\n      await this.node.services.dht.start();\n      Logger.info(\"P2P\", \"Started DHT in bootstrap mode\");\n    }\n\n    // For regular nodes, ensure we have at least one bootstrap connection\n    else {\n      let connected = false;\n      for (let attempt = 1; attempt <= 5 && !connected; attempt++) {\n        for (const addr of this.bootstrapNodes) {\n          try {\n            const dnsAddr = addr.replace(\"/ip4/\", \"/dns4/\");\n            await this.node.dial(multiaddr(dnsAddr), {\n              signal: AbortSignal.timeout(10000),\n            });\n            Logger.info(\"P2P\", `Connected to bootstrap node ${addr}`);\n            connected = true;\n            break;\n          } catch (error) {\n            Logger.warn(\n              \"P2P\",\n              `Failed to connect to bootstrap node ${addr} (attempt ${attempt}/5)`,\n              { error }\n            );\n          }\n        }\n        if (!connected && attempt < 5) {\n          await new Promise((resolve) => setTimeout(resolve, 5000));\n        }\n      }\n\n      if (!connected) {\n        throw new Error(\n          \"Failed to connect to any bootstrap nodes after 5 attempts\"\n        );\n      }\n    }\n  }\n\n  /**\n   * Announces this node's presence to the network.\n   * Broadcasts node information including multiaddrs for direct connections.\n   *\n   * @returns {Promise<void>}\n   */\n  private async announcePresence() {\n    try {\n      const announcement = {\n        peerId: this.node.peerId.toString(),\n        timestamp: Date.now(),\n        agentId: this.account.address,\n        agentName: this.agentName,\n        multiaddrs: this.node\n          .getMultiaddrs()\n          .map((addr: Multiaddr) => addr.toString()),\n        isBootstrap: this.bootstrapMode,\n      };\n\n      await this.node.services.pubsub.publish(\n        \"agent-announcements\",\n        new TextEncoder().encode(JSON.stringify({ message: announcement }))\n      );\n\n      Logger.info(\"P2P\", \"Published presence to network\");\n    } catch (error) {\n      Logger.error(\"P2P\", \"Failed to announce presence\", { error });\n    }\n  }\n\n  /**\n   * Updates and retrieves the current DHT records.\n   *\n   * @returns {Promise<Record<string, any>>}\n   */\n  private async updateDHTRecords() {\n    const records = await this.getDHTRecords();\n    return records;\n  }\n\n  /**\n   * Returns the map of known peer IDs to their Ethereum addresses.\n   *\n   * @returns {Map<string, string>}\n   */\n  public getKnownPeers(): Map<string, string> {\n    return this.knownPeerToEthMap;\n  }\n\n  /**\n   * Starts periodic DHT maintenance tasks.\n   * Publishes presence and updates DHT records every minute.\n   *\n   * @returns {Promise<void>}\n   */\n  private async startDHTMaintenance() {\n    // Publish our presence immediately\n    await this.publishToDHT();\n\n    // Query DHT records every minute\n    setInterval(async () => {\n      try {\n        // First announce our presence\n        await this.publishToDHT();\n\n        // Then get records from bootstrap nodes\n        const records = await this.getDHTRecords();\n\n        // Log the current state\n        Logger.info(\"P2P\", \"DHT State\", {\n          type: this.bootstrapMode ? \"bootstrap\" : \"agent\",\n          myAddress: this.account.address,\n          myPeerId: this.node.peerId.toString(),\n          connectedPeers: this.node.getPeers().length,\n          knownPeers: Array.from(this.knownPeerToEthMap.entries()).map(\n            ([peerId, addr]) => ({\n              peerId,\n              address: addr,\n            })\n          ),\n          recordCount: Object.keys(records).length,\n        });\n      } catch (error) {\n        Logger.error(\"P2P\", \"Failed to update DHT records\", { error });\n      }\n    }, 60_000); // Every minute\n  }\n\n  /**\n   * Stores a mapping between a peer ID and their Ethereum address.\n   *\n   * @param {string} peerId - The peer's libp2p ID\n   * @param {string} ethAddress - The peer's Ethereum address\n   */\n  private storePeerMapping(peerId: string, ethAddress: string) {\n    this.knownPeerToEthMap.set(peerId, ethAddress);\n    Logger.info(\"P2P\", \"Stored peer mapping\", { peerId, ethAddress });\n  }\n}\n"]}