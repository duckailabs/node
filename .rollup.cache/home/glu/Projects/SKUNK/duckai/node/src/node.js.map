{"version":3,"file":"node.js","sourceRoot":"","sources":["node.ts"],"names":[],"mappings":"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","sourcesContent":["import \"./polyfills\"; // Must be first import to ensure libp2p has access to CustomEvent\n\nimport { config as dotenvConfig } from \"dotenv\";\nimport path from \"path\";\nimport { BOOTSTRAP_PEER_IDS, getBootstrapKey } from \"./constants\";\nimport { NetworkName } from \"./networks\";\nimport { P2PNetwork } from \"./p2p\";\nimport { Logger } from \"./utils/logger\";\n\n// Only load .env file if ENV_FILE is explicitly set (for local development)\nif (process.env.ENV_FILE) {\n  dotenvConfig({ path: path.resolve(process.cwd(), process.env.ENV_FILE) });\n  console.log(\"Loading environment from file:\", process.env.ENV_FILE);\n} else {\n  console.log(\"Using environment variables from system\");\n}\n\n// Validate required environment variables\nif (!process.env.PRIVATE_KEY) {\n  throw new Error(\"PRIVATE_KEY environment variable is required\");\n}\n\nconst NODE_TYPE = process.env.NODE_TYPE || \"agent\";\nconst config = {\n  nodeType: NODE_TYPE,\n  name:\n    NODE_TYPE === \"bootstrap\"\n      ? process.env.BOOTSTRAP_NAME || \"bootstrap-1\"\n      : process.env.AGENT_NAME || \"agent-1\",\n  port: parseInt(process.env.PORT || process.env.P2P_PORT || \"8000\"),\n  privateKey: process.env.PRIVATE_KEY,\n  registryAddress:\n    process.env.REGISTRY_ADDRESS ||\n    \"0x05430ECEc2E4D86736187B992873EA8D5e1f1e32\",\n  rpcUrl: process.env.RPC_URL || \"https://mainnet.base.org\",\n  network: process.env.NETWORK || \"base\",\n  version: process.env.VERSION || \"1.0.0\",\n  metadata: process.env.METADATA ? JSON.parse(process.env.METADATA) : {},\n  useEncryption: process.env.USE_ENCRYPTION === \"true\",\n};\n\nlet p2p: P2PNetwork;\n\n/**\n * Initializes the P2P node with the provided configuration.\n * This function sets up either a bootstrap node or a regular agent node based on the configuration.\n * For bootstrap nodes, it uses a specific libp2p key, while regular nodes use their Ethereum private key.\n * After initialization, it registers the node with the contract and sets up message handling for non-bootstrap nodes.\n *\n * @throws {Error} If the private key configuration is missing\n * @returns {Promise<void>}\n */\nasync function initNode() {\n  if (!config.privateKey) {\n    throw new Error(\"Missing required private key configuration\");\n  }\n\n  // Initialize logger first\n  await Logger.init(config.name);\n\n  Logger.info(\"Node\", \"Initializing P2P node\", {\n    name: config.name,\n    nodeType: config.nodeType,\n    port: config.port,\n  });\n\n  // Create P2P network with Ethereum private key\n  p2p = new P2PNetwork(\n    config.privateKey,\n    config.name,\n    config.version,\n    config.metadata,\n    config.registryAddress,\n    config.rpcUrl,\n    config.network as NetworkName,\n    config.useEncryption\n  );\n\n  // If this is a bootstrap node, we need to use its specific libp2p key\n  if (config.nodeType === \"bootstrap\") {\n    const bootstrapKey = await getBootstrapKey(config.name);\n    await p2p.start(config.port, bootstrapKey);\n  } else {\n    await p2p.start(config.port);\n  }\n\n  await p2p.registerWithContract();\n\n  // If we're a bootstrap node\n  if (config.nodeType === \"bootstrap\") {\n    Logger.info(\"Node\", \"Starting bootstrap node\", {\n      name: config.name,\n      expectedPeerId:\n        BOOTSTRAP_PEER_IDS[config.name as keyof typeof BOOTSTRAP_PEER_IDS],\n    });\n\n    Logger.info(\"Node\", \"Bootstrap node started\", {\n      name: config.name,\n      multiaddrs: p2p.getLibp2p().getMultiaddrs().map(String),\n      peerId: p2p.getLibp2p().peerId.toString(),\n    });\n    return;\n  }\n\n  // Handle incoming messages for non-bootstrap nodes\n  p2p.on(\"message\", async (message: any) => {\n    Logger.info(\"Node\", \"Received message\", {\n      from: message.fromAgentId,\n      content: message.content,\n    });\n  });\n}\n\n/**\n * Handles graceful shutdown of the P2P node.\n * This function is called when the process receives SIGTERM or SIGINT signals.\n * It ensures that the P2P node is properly stopped before exiting the process.\n *\n * @returns {Promise<void>}\n */\nasync function shutdown() {\n  Logger.info(\"Node\", \"Shutting down...\");\n  try {\n    if (p2p) {\n      await p2p.stop();\n    }\n    process.exit(0);\n  } catch (error) {\n    Logger.error(\"Node\", \"Error during shutdown\", { error });\n    process.exit(1);\n  }\n}\n\nprocess.on(\"SIGTERM\", shutdown);\nprocess.on(\"SIGINT\", shutdown);\n\n/**\n * Starts the P2P node.\n * This is the main entry point for the application.\n * It initializes the node and handles any errors that occur during startup.\n *\n * @returns {Promise<void>}\n */\nasync function start() {\n  try {\n    await initNode();\n    Logger.info(\"Node\", \"Node started successfully\");\n  } catch (error) {\n    Logger.error(\"Node\", \"Failed to start node\", { error });\n    process.exit(1);\n  }\n}\n\nstart();\n"]}