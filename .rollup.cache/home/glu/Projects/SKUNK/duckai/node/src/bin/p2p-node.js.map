{"version":3,"file":"p2p-node.js","sourceRoot":"","sources":["p2p-node.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from \"commander\";\nimport { config } from \"dotenv\";\nimport { createInterface } from \"readline\";\nimport { P2PNetwork } from \"../p2p\";\nimport { Logger } from \"../utils/logger\";\n\n// Initialize logger first\nawait Logger.init(\"p2p-node\", {\n  useStdout: process.env.LOG_TO_CONSOLE === \"true\",\n  useFile: true,\n});\n\n// Early debug logs\nLogger.debug(\"P2P\", \"p2p-node script starting\");\nLogger.debug(\"P2P\", \"Process arguments\", { argv: process.argv });\nLogger.debug(\"P2P\", \"Environment variables\", {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: process.env.DEBUG,\n  PRIVATE_KEY: process.env.PRIVATE_KEY ? \"set\" : \"not set\",\n  P2P_PORT: process.env.P2P_PORT,\n  AGENT_NAME: process.env.AGENT_NAME,\n});\n\nasync function main() {\n  // Load environment variables\n  config();\n\n  // Parse command line arguments\n  const program = new Command();\n  program\n    .option(\"-p, --port <number>\", \"Port to listen on\", \"8000\")\n    .option(\"-b, --bootstrap <addresses>\", \"Bootstrap peer addresses\")\n    .option(\"-n, --name <string>\", \"Agent name\", \"agent-1\")\n    .option(\"-k, --private-key <string>\", \"Ethereum private key\")\n    .option(\"-e, --env-file <path>\", \"Path to env file\")\n    .parse(process.argv);\n\n  const options = program.opts();\n\n  // Load specific env file if provided\n  if (options.envFile) {\n    config({ path: options.envFile });\n  }\n\n  // Required configuration\n  const privateKey = options.privateKey || process.env.PRIVATE_KEY;\n  if (!privateKey) {\n    Logger.error(\"P2P\", \"Private key is required\");\n    process.exit(1);\n  }\n\n  // Initialize P2P network\n  const network = new P2PNetwork(\n    privateKey,\n    options.name,\n    \"1.0.0\",\n    {}, // Empty metadata for now\n    process.env.REGISTRY_ADDRESS,\n    process.env.RPC_URL,\n    \"base\",\n    true // Enable encryption\n  );\n\n  // Set up readline interface for stdin\n  const rl = createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    terminal: false,\n  });\n\n  // Helper to emit events\n  function emitEvent(event: NodeEvent) {\n    process.stdout.write(JSON.stringify(event) + \"\\n\");\n  }\n\n  // Handle incoming commands\n  rl.on(\"line\", async (line) => {\n    try {\n      const command = JSON.parse(line) as NodeCommand;\n\n      switch (command.type) {\n        case \"connect\":\n          await network.start(command.port || parseInt(options.port));\n          emitEvent({\n            type: \"ready\",\n            peerId: network.getAddress(),\n          });\n          break;\n\n        case \"send\":\n          await network.sendMessage(command.peerId, command.data);\n          break;\n\n        case \"discover\":\n          // Return known peers from the network\n          const knownPeers = network.getKnownPeers();\n          for (const [peerId] of knownPeers) {\n            emitEvent({\n              type: \"peer_discovered\",\n              peerId,\n              topics: [\"agents\"], // Default topic\n            });\n          }\n          break;\n\n        case \"subscribe\":\n          // GossipSub handles subscriptions automatically\n          // Just acknowledge it\n          emitEvent({\n            type: \"ready\",\n            peerId: network.getAddress(),\n          });\n          break;\n\n        case \"shutdown\":\n          await network.stop();\n          process.exit(0);\n          break;\n\n        default:\n          emitEvent({\n            type: \"error\",\n            code: \"INVALID_COMMAND\",\n            message: `Unknown command type: ${(command as any).type}`,\n          });\n      }\n    } catch (error) {\n      emitEvent({\n        type: \"error\",\n        code: \"COMMAND_FAILED\",\n        message: error instanceof Error ? error.message : String(error),\n      });\n    }\n  });\n\n  // Forward P2P network events\n  network.on(\"peer:discovery\", (peerId: string) => {\n    emitEvent({\n      type: \"peer_discovered\",\n      peerId,\n      topics: [\"agents\"],\n    });\n  });\n\n  network.on(\"message\", (fromPeerId: string, data: any) => {\n    emitEvent({\n      type: \"message\",\n      from: fromPeerId,\n      data,\n    });\n  });\n\n  // Handle process signals\n  process.on(\"SIGINT\", async () => {\n    await network.stop();\n    process.exit(0);\n  });\n\n  process.on(\"SIGTERM\", async () => {\n    await network.stop();\n    process.exit(0);\n  });\n\n  // Disable console.log and use stdout only for JSON messages\n  console.log = () => {};\n  Logger.setLogHandler((level, namespace, message, meta) => {\n    emitEvent({\n      type: \"log\",\n      level,\n      namespace,\n      message,\n      meta,\n    });\n  });\n}\n\n// Command and Event types\ntype NodeCommand =\n  | { type: \"connect\"; port: number; bootstrapPeers?: string[] }\n  | { type: \"send\"; peerId: string; data: any }\n  | { type: \"discover\"; topic: string }\n  | { type: \"subscribe\"; topic: string }\n  | { type: \"shutdown\" };\n\ntype NodeEvent =\n  | { type: \"ready\"; peerId: string }\n  | { type: \"message\"; from: string; data: any }\n  | { type: \"peer_discovered\"; peerId: string; topics: string[] }\n  | { type: \"error\"; code: string; message: string }\n  | {\n      type: \"log\";\n      level: string;\n      namespace: string;\n      message: string;\n      meta?: any;\n    };\n\n// Wrap main() in try-catch\ntry {\n  Logger.debug(\"P2P\", \"Calling main()\");\n  main().catch((error) => {\n    Logger.error(\"P2P\", \"Fatal error in main()\", error);\n    if (error?.stack) {\n      Logger.error(\"P2P\", \"Error stack\", { stack: error.stack });\n    }\n    process.exit(1);\n  });\n} catch (error) {\n  Logger.error(\"P2P\", \"Error starting p2p-node\", error);\n  if (error instanceof Error && error.stack) {\n    Logger.error(\"P2P\", \"Error stack\", { stack: error.stack });\n  }\n  process.exit(1);\n}\n"]}