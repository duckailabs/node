{"version":3,"file":"send-message.js","sourceRoot":"","sources":["send-message.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAEnC,MAAM,EAAE,CAAC;AAET,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE,CAAC;AACxD,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;AAE1C,KAAK,UAAU,IAAI;IACjB,uCAAuC;IACvC,MAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhC,IAAI,CAAC,aAAa,IAAI,CAAC,OAAO,EAAE,CAAC;QAC/B,OAAO,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAC3E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,UAAU,CAC5B,WAAW,EACX,OAAO,EACP,OAAO,EACP,EAAE,QAAQ,EAAE,MAAM,EAAE,EACpB,gBAAgB,EAChB,OAAO,CACR,CAAC;IAEF,oBAAoB;IACpB,MAAM,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC;IAE9D,mBAAmB;IACnB,OAAO,CAAC,GAAG,CAAC,sBAAsB,aAAa,KAAK,CAAC,CAAC;IACtD,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,EAAE,CAAC,CAAC;IAE9C,wCAAwC;IACxC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACxD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { config } from 'dotenv';\nimport { P2PNetwork } from \"./p2p\";\n\nconfig();\n\nconst PRIVATE_KEY = process.env.DUCKY_PRIVATE_KEY || \"\";\nconst REGISTRY_ADDRESS = process.env.REGISTRY_ADDRESS || \"\";\nconst RPC_URL = process.env.RPC_URL || \"\";\n\nasync function main() {\n  // Get target address from command line\n  const targetAddress = process.argv[2];\n  const message = process.argv[3];\n\n  if (!targetAddress || !message) {\n    console.error(\"Usage: bun run send-message.ts <target-address> <message>\");\n    process.exit(1);\n  }\n\n  const network = new P2PNetwork(\n    PRIVATE_KEY,\n    \"ducky\",\n    \"1.0.0\",\n    { creators: \"test\" },\n    REGISTRY_ADDRESS,\n    RPC_URL\n  );\n\n  // Start the network\n  await network.start(5001); // Different port than the listener\n\n  // Send the message\n  console.log(`Sending message to ${targetAddress}...`);\n  const messageId = await network.sendMessage(targetAddress, message);\n  console.log(`Message sent! ID: ${messageId}`);\n\n  // Wait a bit for the message to be sent\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  process.exit(0);\n}\n\nmain().catch(console.error); "]}