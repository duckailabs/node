{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"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","sourcesContent":["import bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport express, { NextFunction, Request, Response } from \"express\";\nimport { Chain, createPublicClient, http, PublicClient } from \"viem\";\nimport AgentRegistryABI from \"../src/abi/AgentRegistry.json\" assert { type: \"json\" };\nimport { networks } from \"../src/networks.js\";\nimport { P2PNetwork } from \"../src/p2p.js\";\nimport { Logger } from \"../src/utils/logger.js\";\n\ninterface ConnectedClient {\n  agentId: string;\n  lastSeen: number;\n  messageCallbacks: Set<(message: any) => void>;\n}\n\ninterface MessageRequest {\n  to: string;\n  content: string;\n  conversationId?: string;\n  replyTo?: string;\n}\n\ninterface AgentInfo {\n  name: string;\n  metadata: string;\n  reputation: bigint;\n  isActive: boolean;\n  isBlocked: boolean;\n  registrationTime: bigint;\n}\n\nexport class APIServer {\n  private app: express.Application;\n  private p2p: P2PNetwork;\n  private connectedClients: Map<string, ConnectedClient>;\n  private registryContract: PublicClient;\n  private publicClient: PublicClient;\n\n  constructor(\n    private port: number = 3000,\n    private nodePrivateKey: string,\n    private registryAddress: string,\n    private rpcUrl: string,\n    private network: \"base\" | \"mode\" = \"base\"\n  ) {\n    this.app = express();\n    this.connectedClients = new Map();\n\n    // Initialize the registry contract and public client\n    const chain = networks[network] as Chain;\n    this.publicClient = createPublicClient({\n      chain,\n      transport: http(rpcUrl),\n    });\n\n    this.registryContract = this.publicClient;\n\n    // Initialize P2P node\n    this.p2p = new P2PNetwork(\n      nodePrivateKey,\n      \"api-node\",\n      \"1.0.0\",\n      {},\n      registryAddress,\n      rpcUrl,\n      network,\n      true // Use encryption\n    );\n\n    this.setupExpress();\n    this.setupP2PHandlers();\n  }\n\n  private setupExpress(): void {\n    this.app.use(cors());\n    this.app.use(bodyParser.json());\n\n    // Authentication middleware\n    this.app.use(async (req: Request, res: Response, next: NextFunction) => {\n      const signature = req.headers[\"x-signature\"] as string;\n      const timestamp = req.headers[\"x-timestamp\"] as string;\n      const agentId = req.headers[\"x-agent-id\"] as string;\n\n      // If no auth headers are present, assign a temporary identity\n      if (!signature || !timestamp || !agentId) {\n        // Generate a temporary ID for this request\n        const tempId = `temp-${Date.now()}-${Math.random()\n          .toString(36)\n          .slice(2)}`;\n        req.headers[\"x-temp-id\"] = tempId;\n        return next();\n      }\n\n      try {\n        // Verify timestamp is within 5 minutes\n        const timestampNum = parseInt(timestamp);\n        const now = Date.now();\n        if (Math.abs(now - timestampNum) > 5 * 60 * 1000) {\n          return res.status(401).json({ error: \"Timestamp too old\" });\n        }\n\n        // Verify signature\n        const message = `Authenticate to OpenPond API at timestamp ${timestamp}`;\n        const isValidSignature = await this.publicClient.verifyMessage({\n          address: agentId as `0x${string}`,\n          message,\n          signature: signature as `0x${string}`,\n        });\n\n        if (!isValidSignature) {\n          return res.status(401).json({ error: \"Invalid signature\" });\n        }\n\n        // Verify agent is registered\n        const isRegistered = await this.registryContract.readContract({\n          address: this.registryAddress as `0x${string}`,\n          abi: AgentRegistryABI,\n          functionName: \"isRegistered\",\n          args: [agentId],\n        });\n\n        if (!isRegistered) {\n          return res.status(403).json({ error: \"Agent not registered\" });\n        }\n\n        // Get agent info to check if blocked\n        const agentInfo = (await this.registryContract.readContract({\n          address: this.registryAddress as `0x${string}`,\n          abi: AgentRegistryABI,\n          functionName: \"getAgentInfo\",\n          args: [agentId],\n        })) as AgentInfo;\n\n        if (agentInfo.isBlocked) {\n          return res.status(403).json({ error: \"Agent is blocked\" });\n        }\n\n        // Store/update client connection\n        this.updateClientConnection(agentId);\n        next();\n      } catch (error) {\n        Logger.error(\"API\", \"Authentication error\", { error });\n        return res.status(500).json({ error: \"Authentication failed\" });\n      }\n    });\n\n    // Add message route\n    this.app.post(\"/message\", this.handleMessage.bind(this));\n\n    // Routes\n    this.setupRoutes();\n  }\n\n  private setupRoutes(): void {\n    // Send message\n    this.app.post(\n      \"/message\",\n      async (req: Request<{}, {}, MessageRequest>, res: Response) => {\n        const { to, content, conversationId, replyTo } = req.body;\n        const fromAgentId = req.headers[\"x-agent-id\"] as string;\n\n        try {\n          const messageId = await this.p2p.sendMessage(\n            to,\n            content,\n            conversationId,\n            replyTo\n          );\n          res.json({ messageId });\n        } catch (error) {\n          Logger.error(\"API\", \"Send message error\", { error });\n          res.status(500).json({ error: \"Failed to send message\" });\n        }\n      }\n    );\n\n    // Get network status\n    this.app.get(\"/status\", (_req: Request, res: Response) => {\n      const status = this.p2p.getNetworkStatus();\n      res.json(status);\n    });\n\n    // Get connected peers\n    this.app.get(\"/peers\", async (_req: Request, res: Response) => {\n      try {\n        const agents = await this.p2p.getConnectedAgents();\n        res.json(agents);\n      } catch (error) {\n        Logger.error(\"API\", \"Get peers error\", { error });\n        res.status(500).json({ error: \"Failed to get peers\" });\n      }\n    });\n\n    // Get all agents (both connected and from registry)\n    this.app.get(\"/agents\", async (_req: Request, res: Response) => {\n      try {\n        // Get all agents from the P2P network's DHT records\n        const dhtRecords = await this.p2p.getDHTRecords();\n\n        // Format the records into a consistent response\n        const agents = Object.entries(dhtRecords).map(([ethAddr, record]) => ({\n          address: ethAddr,\n          peerId: record.peerId,\n          name: record.agentName || `Agent ${ethAddr.slice(0, 6)}`,\n          timestamp: record.timestamp,\n          isConnected: true, // These are all connected agents since they're in DHT\n        }));\n\n        res.json(agents);\n      } catch (error) {\n        Logger.error(\"API\", \"Get agents error\", { error });\n        res.status(500).json({ error: \"Failed to get agents\" });\n      }\n    });\n\n    // WebSocket-style message streaming\n    this.app.get(\"/messages/stream\", (req: Request, res: Response) => {\n      const agentId = req.headers[\"x-agent-id\"] as string;\n\n      // Set up SSE\n      res.setHeader(\"Content-Type\", \"text/event-stream\");\n      res.setHeader(\"Cache-Control\", \"no-cache\");\n      res.setHeader(\"Connection\", \"keep-alive\");\n\n      const messageCallback = (message: any) => {\n        if (message.toAgentId === agentId) {\n          res.write(`data: ${JSON.stringify(message)}\\n\\n`);\n        }\n      };\n\n      // Add callback to client's callbacks\n      const client = this.connectedClients.get(agentId);\n      if (client) {\n        client.messageCallbacks.add(messageCallback);\n      }\n\n      // Remove callback when client disconnects\n      req.on(\"close\", () => {\n        const client = this.connectedClients.get(agentId);\n        if (client) {\n          client.messageCallbacks.delete(messageCallback);\n        }\n      });\n    });\n  }\n\n  private setupP2PHandlers(): void {\n    // Handle incoming messages\n    this.p2p.on(\"message\", (message: any) => {\n      const client = this.connectedClients.get(message.toAgentId);\n      if (client) {\n        // Forward message to all client's callbacks\n        client.messageCallbacks.forEach((callback) => callback(message));\n      }\n    });\n  }\n\n  private updateClientConnection(agentId: string): void {\n    const existing = this.connectedClients.get(agentId);\n    if (existing) {\n      existing.lastSeen = Date.now();\n    } else {\n      this.connectedClients.set(agentId, {\n        agentId,\n        lastSeen: Date.now(),\n        messageCallbacks: new Set(),\n      });\n    }\n  }\n\n  private startCleanupInterval(): void {\n    // Clean up stale clients every minute\n    setInterval(() => {\n      const now = Date.now();\n      for (const [agentId, client] of this.connectedClients.entries()) {\n        if (now - client.lastSeen > 5 * 60 * 1000) {\n          // 5 minutes\n          this.connectedClients.delete(agentId);\n        }\n      }\n    }, 60 * 1000);\n  }\n\n  async start(): Promise<void> {\n    try {\n      // Start P2P node\n      await this.p2p.start(8000); // Use port 8000 for P2P\n      await this.p2p.registerWithContract();\n\n      // Start API server\n      this.app.listen(this.port, () => {\n        Logger.info(\"API\", `API server running on port ${this.port}`);\n      });\n\n      // Start cleanup interval\n      this.startCleanupInterval();\n    } catch (error) {\n      Logger.error(\"API\", \"Failed to start API server\", { error });\n      throw error;\n    }\n  }\n\n  async stop(): Promise<void> {\n    await this.p2p.stop();\n  }\n\n  private async handleMessage(req: Request, res: Response) {\n    try {\n      const { to, content, conversationId, replyTo } =\n        req.body as MessageRequest;\n\n      // Get sender ID - either agent ID or temporary ID\n      const senderId = req.headers[\"x-agent-id\"] || req.headers[\"x-temp-id\"];\n\n      if (!senderId) {\n        return res.status(400).json({ error: \"No sender ID found\" });\n      }\n\n      // Send message through P2P network\n      await this.p2p.sendMessage(to, content, conversationId, replyTo);\n\n      Logger.info(\"API\", \"Message sent\", { from: senderId, to });\n      res.json({ success: true });\n    } catch (error) {\n      Logger.error(\"API\", \"Send message error\", { error });\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  }\n}\n"]}