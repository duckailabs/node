{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,4EAA4E;AAC5E,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACzB,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtE,CAAC;KAAM,CAAC;IACN,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;AACzD,CAAC;AAED,0CAA0C;AAC1C,MAAM,eAAe,GAAG,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;AAE3E,KAAK,MAAM,MAAM,IAAI,eAAe,EAAE,CAAC;IACrC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,0CAA0C,MAAM,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC;AAED,kCAAkC;AAClC,KAAK,UAAU,IAAI;IACjB,0BAA0B;IAC1B,MAAM,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAEhC,MAAM,MAAM,GAAG,IAAI,SAAS,CAC1B,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,MAAM,CAAC,EAC5D,OAAO,CAAC,GAAG,CAAC,eAAgB,EAC5B,OAAO,CAAC,GAAG,CAAC,gBAAiB,EAC7B,OAAO,CAAC,GAAG,CAAC,OAAQ,EACpB,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,MAAM,CAAoB,CACnD,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,4BAA4B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAC7D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,2BAA2B;IAC3B,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,6BAA6B,CAAC,CAAC;QAClD,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,6BAA6B,CAAC,CAAC;QAClD,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,IAAI,EAAE,CAAC","sourcesContent":["import { config } from \"dotenv\";\nimport path from \"path\";\nimport { Logger } from \"../src/utils/logger.js\";\nimport { APIServer } from \"./server.js\";\n\n// Only load .env file if ENV_FILE is explicitly set (for local development)\nif (process.env.ENV_FILE) {\n  config({ path: path.resolve(process.cwd(), process.env.ENV_FILE) });\n  console.log(\"Loading environment from file:\", process.env.ENV_FILE);\n} else {\n  console.log(\"Using environment variables from system\");\n}\n\n// Validate required environment variables\nconst requiredEnvVars = [\"API_PRIVATE_KEY\", \"REGISTRY_ADDRESS\", \"RPC_URL\"];\n\nfor (const envVar of requiredEnvVars) {\n  if (!process.env[envVar]) {\n    throw new Error(`Missing required environment variable: ${envVar}`);\n  }\n}\n\n// Initialize and start API server\nasync function main() {\n  // Initialize logger first\n  await Logger.init(\"api-server\");\n\n  const server = new APIServer(\n    parseInt(process.env.PORT || process.env.API_PORT || \"3000\"),\n    process.env.API_PRIVATE_KEY!,\n    process.env.REGISTRY_ADDRESS!,\n    process.env.RPC_URL!,\n    (process.env.NETWORK || \"base\") as \"base\" | \"mode\"\n  );\n\n  try {\n    await server.start();\n    Logger.info(\"API\", \"API server started successfully\");\n  } catch (error) {\n    Logger.error(\"API\", \"Failed to start API server\", { error });\n    process.exit(1);\n  }\n\n  // Handle graceful shutdown\n  process.on(\"SIGTERM\", async () => {\n    Logger.info(\"API\", \"Shutting down API server...\");\n    await server.stop();\n    await Logger.cleanup();\n    process.exit(0);\n  });\n\n  process.on(\"SIGINT\", async () => {\n    Logger.info(\"API\", \"Shutting down API server...\");\n    await server.stop();\n    await Logger.cleanup();\n    process.exit(0);\n  });\n}\n\nmain();\n"]}