{"version":3,"file":"deploy-fly.js","sourceRoot":"","sources":["deploy-fly.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,MAAM,OAAO,GAAG;IACd,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;IAC/C,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;IAC/C,KAAK,EAAE,KAAK;CACb,CAAC;AAEF,KAAK,UAAU,WAAW;IACxB,IAAI,CAAC;QACH,+BAA+B;QAC/B,IAAI,CAAC;YACH,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC7B,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YAC9C,QAAQ,CAAC,wCAAwC,CAAC,CAAC;QACrD,CAAC;QAED,iCAAiC;QACjC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAC7D,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;YACpD,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,YAAY,GAAG,aAAa,MAAM,EAAE,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,uBAAuB,MAAM,KAAK,CAAC,CAAC;YAE1D,IAAI,CAAC;gBACH,yDAAyD;gBACzD,QAAQ,CAAC;qBACI,MAAM;mBACR,YAAY;6BACF,YAAY;yBAChB,MAAM;8BACD,KAAK,GAAG,CAAC;6BACV,EAAE;oBACrB,KAAK,EAAE,SAAS;iBACjB,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,+BAA+B,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QAE9C,yBAAyB;QACzB,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;QAC5C,QAAQ,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IAExD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,mBAAmB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC;AAED,WAAW,EAAE,CAAC","sourcesContent":["import { execSync } from 'child_process';\nimport { Logger } from '../src/utils/logger';\n\nconst REGIONS = [\n  \"sjc\", \"sea\", \"ord\", \"dfw\", \"iad\", \"ewr\", \"lhr\", \n  \"ams\", \"fra\", \"mad\", \"cdg\", \"nrt\", \"hkg\", \"sin\", \n  \"syd\", \"gru\"\n];\n\nasync function deployToFly() {\n  try {\n    // Check if flyctl is installed\n    try {\n      execSync('flyctl version');\n    } catch {\n      Logger.info('Deploy', 'Installing flyctl...');\n      execSync('curl -L https://fly.io/install.sh | sh');\n    }\n\n    // Create machines in each region\n    Logger.info('Deploy', 'Creating machines in each region...');\n    for (let index = 0; index < REGIONS.length; index++) {\n      const region = REGIONS[index];\n      const instanceName = `p2p-agent-${region}`;\n      Logger.info('Deploy', `Creating machine in ${region}...`);\n      \n      try {\n        // Create machine in specific region with unique env vars\n        execSync(`flyctl machine run . \\\n          --region ${region} \\\n          --name ${instanceName} \\\n          --env AGENT_NAME=${instanceName} \\\n          --env REGION=${region} \\\n          --env INSTANCE_ID=${index + 1} \\\n          --env HOST=0.0.0.0`, { \n          stdio: 'inherit' \n        });\n      } catch (error) {\n        Logger.error('Deploy', `Failed to create machine in ${region}`, { error });\n      }\n    }\n\n    Logger.info('Deploy', 'Deployment complete!');\n\n    // Show running instances\n    Logger.info('Deploy', 'Running instances:');\n    execSync('flyctl machine list', { stdio: 'inherit' });\n\n  } catch (error) {\n    Logger.error('Deploy', 'Deployment failed', { error });\n    process.exit(1);\n  }\n}\n\ndeployToFly(); "]}