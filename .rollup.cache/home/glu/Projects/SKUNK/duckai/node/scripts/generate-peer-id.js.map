{"version":3,"file":"generate-peer-id.js","sourceRoot":"","sources":["generate-peer-id.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,QAAQ,IAAI,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAEvE,KAAK,UAAU,qBAAqB;IAClC,MAAM,MAAM,GAAG,MAAM,qBAAqB,EAAE,CAAC;IAE7C,yDAAyD;IACzD,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IACrC,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAE/D,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,iBAAiB,YAAY,EAAE,CAAC,CAAC;AAC/C,CAAC;AAED,qBAAqB,EAAE,CAAC","sourcesContent":["import { createSecp256k1PeerId } from '@libp2p/peer-id-factory';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n\nasync function generateAndSavePeerId() {\n  const peerId = await createSecp256k1PeerId();\n  \n  // Get bytes representation that can be stored and reused\n  const peerIdBytes = peerId.toBytes();\n  const peerIdString = uint8ArrayToString(peerIdBytes, 'base64');\n  \n  console.log('Save this in your .env:');\n  console.log(`PEER_ID_BYTES=${peerIdString}`);\n}\n\ngenerateAndSavePeerId(); "]}