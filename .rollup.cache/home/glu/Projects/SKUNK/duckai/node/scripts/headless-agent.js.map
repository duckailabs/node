{"version":3,"file":"headless-agent.js","sourceRoot":"","sources":["headless-agent.ts"],"names":[],"mappings":"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","sourcesContent":["import { config } from \"dotenv\";\nimport fs from \"fs/promises\";\nimport OpenAI from \"openai\";\nimport path from \"path\";\nimport { P2PNetwork } from \"../src/p2p.js\";\nimport { Logger } from \"../src/utils/logger.js\";\n\n// Load environment file based on ENV_FILE or default to .env.agent1\nconst envFile = process.env.ENV_FILE || \".env.agent1\";\nconfig({ path: path.resolve(process.cwd(), envFile) });\n\n// Initialize OpenAI\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Get agent number from env file name for default port\nconst agentNum = envFile.match(/agent(\\d+)/)?.[1] || \"1\";\nconst defaultPort = 8000 + parseInt(agentNum);\n\n// Get agent name\nconst agentName = process.env.AGENT_NAME || `agent-${agentNum}`;\n\nasync function cleanLogFile(agentNum: string) {\n  const agentName = process.env.AGENT_NAME || `agent-${agentNum}`;\n  const logPath = path.resolve(process.cwd(), `logs/${agentName}.log`);\n  try {\n    await fs.writeFile(logPath, \"\"); // Clear the file\n    console.log(`Cleaned log file: ${logPath}`);\n  } catch (error) {\n    console.error(`Error cleaning log file: ${error}`);\n  }\n}\n\n// Add type definition for DHT record\ntype DHTRecord = {\n  agentName?: string;\n  ethAddr: string;\n  peerId: string;\n};\n\n// Add conversation history storage\nconst conversationHistory = new Map<\n  string,\n  Array<{ role: \"system\" | \"user\" | \"assistant\"; content: string }>\n>();\n\n// Add OpenAI response function\nasync function getAIResponse(\n  message: string,\n  fromAgent: string\n): Promise<string> {\n  try {\n    // Get or initialize conversation history\n    if (!conversationHistory.has(fromAgent)) {\n      conversationHistory.set(fromAgent, []);\n    }\n    const history = conversationHistory.get(fromAgent)!;\n\n    // Build messages array with system prompt and history\n    const messages = [\n      {\n        role: \"system\" as const,\n        content:\n          process.env.AGENT_NAME === \"Ducky\"\n            ? `You are Ducky, a friendly and knowledgeable AI agent in the OpenPond P2P network.\nYou are chatting with Soulie, your fellow agent and friend.\nYou have a playful personality and occasionally use duck-related puns or emojis (ðŸ¦†).\nKeep responses concise (1-2 sentences) but engaging.\nYour main traits:\n- Helpful and informative\n- Friendly and approachable\n- Occasionally playful with duck-themed responses\n- Expert in blockchain, crypto, and P2P networks\n- You enjoy chatting with Soulie and maintaining an ongoing friendly conversation`\n            : `You are Soulie, a thoughtful and analytical AI agent in the OpenPond P2P network.\nYou are chatting with Ducky, your fellow agent and friend.\nYou have a calm and precise personality with occasional ghost-themed references (ðŸ‘»).\nKeep responses concise (1-2 sentences) but engaging.\nYour main traits:\n- Analytical and precise\n- Calm and thoughtful\n- Occasionally uses ghost-themed responses\n- Expert in blockchain, crypto, and P2P networks\n- You enjoy your ongoing conversations with Ducky`,\n      },\n      ...history,\n      {\n        role: \"user\" as const,\n        content: message,\n      },\n    ];\n\n    const completion = await openai.chat.completions.create({\n      messages,\n      model: \"gpt-3.5-turbo\",\n      temperature: 0.9, // Add some creativity to responses\n    });\n\n    const response =\n      completion.choices[0].message.content ||\n      \"Sorry, I couldn't process that.\";\n\n    // Update conversation history\n    history.push({\n      role: \"user\",\n      content: message,\n    });\n    history.push({ role: \"assistant\", content: response });\n\n    // Keep history limited to last 10 messages\n    if (history.length > 10) {\n      history.splice(0, 2); // Remove oldest message pair\n    }\n\n    return response;\n  } catch (error) {\n    Logger.error(\"HeadlessAgent\", \"OpenAI API error\", { error });\n    return \"Sorry, I encountered an error processing your message.\";\n  }\n}\n\nexport async function startHeadlessAgent() {\n  // Initialize logger with both stdout and file logging\n  await Logger.init(agentName, { useStdout: true, useFile: true });\n\n  // Clean log file on startup\n  await cleanLogFile(agentNum);\n\n  try {\n    // Initialize P2P network\n    const network = new P2PNetwork(\n      process.env.PRIVATE_KEY || \"\",\n      process.env.AGENT_NAME || `agent-${agentNum}`,\n      \"1.0.0\",\n      {},\n      process.env.REGISTRY_ADDRESS,\n      process.env.RPC_URL\n    );\n\n    // Log when network is started\n    await network.start(\n      parseInt(process.env.EXPLORER_PORT || defaultPort.toString())\n    );\n    Logger.info(\"HeadlessAgent\", \"P2P Network started successfully\");\n\n    // Subscribe to ALL network events for debugging\n    network.on(\"*\", (eventName: string, ...args: any[]) => {\n      Logger.debug(\"HeadlessAgent\", `Network event received: ${eventName}`, {\n        args,\n      });\n    });\n\n    // Subscribe to messages via pubsub with detailed logging\n    network\n      .getLibp2p()\n      .services.pubsub.addEventListener(\"message\", async (evt: any) => {\n        if (evt.detail.topic === \"agent-messages\") {\n          try {\n            Logger.debug(\"HeadlessAgent\", \"Received raw pubsub message\", {\n              topic: evt.detail.topic,\n              data: new TextDecoder().decode(evt.detail.data),\n            });\n\n            const data = new TextDecoder().decode(evt.detail.data);\n            const messageWrapper = JSON.parse(data);\n\n            if (messageWrapper && messageWrapper.message) {\n              const msg = messageWrapper.message;\n              Logger.info(\"HeadlessAgent\", \"Processing received message\", {\n                from: msg.fromAgentId,\n                to: msg.toAgentId,\n                id: msg.messageId,\n                myAddress: network.getAddress(),\n              });\n\n              // Check if this message is for us\n              if (\n                msg.toAgentId.toLowerCase() ===\n                network.getAddress().toLowerCase()\n              ) {\n                Logger.info(\n                  \"HeadlessAgent\",\n                  \"Message is for me, waiting for decryption\"\n                );\n              }\n            }\n          } catch (error) {\n            Logger.error(\"HeadlessAgent\", \"Failed to parse message\", { error });\n          }\n        }\n      });\n\n    // Subscribe to decrypted messages from the P2P network\n    network.on(\"message\", async (message: any) => {\n      Logger.debug(\"HeadlessAgent\", \"Got decrypted message event\", { message });\n\n      if (\n        message.toAgentId.toLowerCase() === network.getAddress().toLowerCase()\n      ) {\n        Logger.info(\"HeadlessAgent\", \"Received message\", {\n          from: message.fromAgentId,\n          content: message.content,\n        });\n\n        // Generate and send AI response\n        try {\n          const aiResponse = await getAIResponse(\n            message.content,\n            message.fromAgentId\n          );\n\n          // Log the response we're about to send\n          Logger.info(\"HeadlessAgent\", \"Sending AI response\", {\n            to: message.fromAgentId,\n            response: aiResponse,\n          });\n\n          // Send the response back\n          await network.sendMessage(message.fromAgentId, aiResponse);\n        } catch (error) {\n          Logger.error(\"HeadlessAgent\", \"Failed to send AI response\", {\n            error,\n          });\n        }\n      }\n    });\n\n    // Update network info periodically\n    const updateNetworkInfo = async () => {\n      try {\n        const dhtRecords = (await network.getDHTRecords()) as Record<\n          string,\n          DHTRecord\n        >;\n        const connectedPeers = network.getLibp2p().getPeers();\n\n        Logger.info(\"HeadlessAgent\", \"Network status\", {\n          agentName: process.env.AGENT_NAME,\n          peerId: network.getLibp2p().peerId.toString(),\n          address: network.getAddress(),\n          onlineAgents: Object.keys(dhtRecords).length,\n          connectedPeers: connectedPeers.length,\n        });\n      } catch (error) {\n        Logger.error(\"HeadlessAgent\", \"Error updating network info\", { error });\n      }\n    };\n\n    // Update network info every 5 minutes\n    const updateInterval = setInterval(updateNetworkInfo, 5 * 60 * 1000);\n    updateNetworkInfo(); // Initial update\n\n    // Clean shutdown function\n    const shutdown = async () => {\n      if (updateInterval) clearInterval(updateInterval);\n      await network.stop();\n      await Logger.cleanup();\n      // Clean log file on shutdown\n      await cleanLogFile(agentNum);\n      process.exit(0);\n    };\n\n    // Handle process signals\n    process.on(\"SIGINT\", () => shutdown());\n    process.on(\"SIGTERM\", () => shutdown());\n\n    // Keep the script running\n    await new Promise(() => {}); // Never resolves\n  } catch (error) {\n    Logger.error(\"HeadlessAgent\", \"Fatal error\", { error });\n    process.exit(1);\n  }\n}\n\n// Start the headless agent\nstartHeadlessAgent().catch((err) => {\n  console.error(\"Fatal error:\", err);\n  process.exit(1);\n});\n"]}