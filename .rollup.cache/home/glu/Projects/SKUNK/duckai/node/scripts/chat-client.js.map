{"version":3,"file":"chat-client.js","sourceRoot":"","sources":["chat-client.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport chalk from \"chalk\";\nimport dotenv from \"dotenv\";\nimport fs from \"fs/promises\";\nimport readline from \"readline\";\nimport { P2PNetwork } from \"../src/p2p\";\nimport { Logger } from \"../src/utils/logger\";\n\ndotenv.config();\n\n// Configuration from env or arguments\nconst config = {\n  name: process.env.AGENT_NAME || process.argv[2],\n  port: parseInt(process.env.P2P_PORT || process.argv[3] || \"8000\"),\n  privateKey: process.env.PRIVATE_KEY || process.argv[4],\n  registryAddress: process.env.REGISTRY_ADDRESS || process.argv[5],\n  rpcUrl: process.env.RPC_URL || process.argv[6],\n  network: process.env.NETWORK || \"mode\",\n};\n\n// Simple color selection\nconst getAgentColor = (name: string) => {\n  const colors = [\n    chalk.blue,\n    chalk.green,\n    chalk.yellow,\n    chalk.magenta,\n    chalk.cyan,\n  ];\n  const index = name\n    .split(\"\")\n    .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n  return colors[index % colors.length];\n};\n\nlet CLI_MODE = process.env.CLI_MODE || \"direct\";\nconst API_URL = \"http://localhost:3000\";\n\nasync function startChatClient() {\n  // Check required config\n  if (\n    !process.env.PRIVATE_KEY ||\n    !process.env.AGENT_NAME ||\n    !process.env.REGISTRY_ADDRESS ||\n    !process.env.RPC_URL\n  ) {\n    throw new Error(\n      \"Missing required configuration. Need: name, privateKey, registryAddress, rpcUrl\"\n    );\n  }\n\n  Logger.info(\"ChatClient\", \"Initializing agent\", {\n    agent: config.name,\n    port: config.port,\n  });\n\n  const node = new P2PNetwork(\n    config.privateKey,\n    config.name,\n    \"1.0.0\",\n    {},\n    config.registryAddress,\n    config.rpcUrl,\n    config.network as any,\n    false\n  );\n\n  try {\n    await node.start(config.port);\n    await node.registerWithContract();\n  } catch (error) {\n    Logger.error(\"ChatClient\", \"Failed to start node\", {\n      error: (error as Error).message,\n      stack: (error as Error).stack,\n    });\n    throw error;\n  }\n\n  // If CLI_MODE is 'none', just show logs\n  if (CLI_MODE === \"none\") {\n    Logger.info(\"ChatClient\", \"Running in log-only mode\");\n    return;\n  }\n\n  // Setup UI\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  // Handle Ctrl+C\n  rl.on(\"SIGINT\", () => {\n    console.log(\"\\nGoodbye!\");\n    process.exit(0);\n  });\n\n  const agentColor = getAgentColor(config.name);\n  console.clear();\n  console.log(\n    \"╔═════════════════════════════════════════════════��═════════════════╗\"\n  );\n  // Ensure consistent padding for the header\n  const headerText = `Connected as ${config.name}`;\n  const padding = 53 - headerText.length; // 53 is the width between ║ chars\n  console.log(`║ ${agentColor(headerText.padEnd(padding))} ║`);\n  console.log(\n    \"╚═══════════════════════════════════════════════════════════════════╝\"\n  );\n  console.log(`${chalk.dim(\"Address:\").padEnd(12)} ${node.getAddress()}`);\n  console.log(`${chalk.dim(\"Registry:\").padEnd(12)} ${config.registryAddress}`);\n  console.log(chalk.dim(\"\\nCommands:\"));\n  console.log(chalk.dim(\"  @<address> <message>  - Send direct message\"));\n  console.log(chalk.dim(\"  all: <message>       - Broadcast message\"));\n  console.log(chalk.dim(\"  /help, /h           - Show this help\"));\n  console.log(chalk.dim(\"  /quit, /q           - Exit chat\"));\n  console.log(chalk.dim(\"  /logs               - Show recent logs\"));\n  console.log(chalk.dim(\"  /http               - Switch to HTTP mode\"));\n  console.log(chalk.dim(\"  /p2p                - Switch to P2P mode\\n\"));\n\n  const getPrompt = () => `${agentColor(config.name)} [${CLI_MODE}]> `;\n  rl.setPrompt(getPrompt());\n  rl.prompt();\n\n  // Handle user input\n  rl.on(\"line\", async (line) => {\n    const input = line.trim();\n\n    if (input === \"/help\" || input === \"/h\") {\n      console.log(chalk.dim(\"\\nCommands:\"));\n      console.log(chalk.dim(\"  @<address> <message>  - Send direct message\"));\n      console.log(chalk.dim(\"  all: <message>       - Broadcast message\"));\n      console.log(chalk.dim(\"  /help, /h           - Show this help\"));\n      console.log(chalk.dim(\"  /quit, /q           - Exit chat\"));\n      console.log(chalk.dim(\"  /logs               - Show recent logs\"));\n      console.log(chalk.dim(\"  /http               - Switch to HTTP mode\"));\n      console.log(chalk.dim(\"  /p2p                - Switch to P2P mode\\n\"));\n    } else if (input === \"/quit\" || input === \"/q\") {\n      process.exit(0);\n    } else if (input === \"/logs\") {\n      try {\n        const logs = await fs.readFile(\"swarm.log\", \"utf8\");\n        const lastLogs = logs\n          .split(\"\\n\")\n          .filter(Boolean)\n          .slice(-10) // Show last 10 logs\n          .map((log) => {\n            const entry = JSON.parse(log);\n            return `[${entry.timestamp}] ${entry.level} [${entry.component}] ${entry.message}`;\n          })\n          .join(\"\\n\");\n        console.log(chalk.dim(\"\\nRecent logs:\"));\n        console.log(lastLogs + \"\\n\");\n      } catch (error) {\n        console.log(chalk.red(\"No logs found or error reading logs\"));\n      }\n    } else if (input === \"/http\") {\n      CLI_MODE = \"http\";\n      console.log(chalk.green(\"Switched to HTTP mode\"));\n      rl.setPrompt(getPrompt());\n    } else if (input === \"/p2p\") {\n      CLI_MODE = \"direct\";\n      console.log(chalk.green(\"Switched to P2P mode\"));\n      rl.setPrompt(getPrompt());\n    } else {\n      try {\n        if (input.startsWith(\"@\")) {\n          const match = input.match(/@(\\w+)\\s+(.*)/);\n          if (match) {\n            const [, to, content] = match;\n            if (CLI_MODE === \"http\") {\n              await axios.post(`${API_URL}/send`, { to, message: content });\n            } else {\n              await node.sendMessage(to, content);\n            }\n            console.log(chalk.dim(`Message sent to ${to}`));\n          }\n        } else if (input.startsWith(\"all:\")) {\n          const content = input.slice(4).trim();\n          if (CLI_MODE === \"http\") {\n            await axios.post(`${API_URL}/broadcast`, { message: content });\n          } else {\n            //await node.sendMessage(content);\n          }\n          console.log(chalk.dim(\"Broadcast message sent\"));\n        } else {\n          console.log(\n            chalk.red(\n              'Invalid format. Use \"@address message\" or \"all: message\"'\n            )\n          );\n        }\n      } catch (error) {\n        console.error(chalk.red(\"Error sending message:\", error));\n      }\n    }\n\n    rl.prompt();\n  });\n\n  // Handle incoming messages\n  node.on(\"message\", async (message: any) => {\n    process.stdout.clearLine(0);\n    process.stdout.cursorTo(0);\n    console.log(`${chalk.blue(message.fromAgentId)}: ${message.content}`);\n    rl.prompt(true);\n  });\n}\n\n// Only start if not in bootstrap mode\nif (process.env.MODE !== \"bootstrap\") {\n  startChatClient().catch((error) => {\n    Logger.error(\"ChatClient\", \"Failed to start\", { error });\n    process.exit(1);\n  });\n}\n"]}