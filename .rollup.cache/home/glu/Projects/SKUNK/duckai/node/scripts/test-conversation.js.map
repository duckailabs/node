{"version":3,"file":"test-conversation.js","sourceRoot":"","sources":["test-conversation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAExC,MAAM,EAAE,CAAC;AAET,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,EAAE,CAAC;AACxD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC;AAClD,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;AAE1C,KAAK,UAAU,KAAK,CAAC,EAAU;IAC7B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,KAAK,UAAU,IAAI;IACjB,8CAA8C;IAC9C,MAAM,MAAM,GAAG,IAAI,UAAU,CAC3B,UAAU,EACV,QAAQ,EACR,OAAO,EACP,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACtB,gBAAgB,EAChB,OAAO,CACR,CAAC;IAEF,2CAA2C;IAC3C,MAAM,GAAG,GAAG,IAAI,UAAU,CACxB,OAAO,EACP,KAAK,EACL,OAAO,EACP,EAAE,QAAQ,EAAE,KAAK,EAAE,EACnB,gBAAgB,EAChB,OAAO,CACR,CAAC;IAEF,sBAAsB;IACtB,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzB,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAEtB,oCAAoC;IACpC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAElB,wBAAwB;IACxB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAExC,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,WAAY,EAAE,uBAAuB,CAAC,CAAC;IAC5E,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAElB,MAAM,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,cAAe,EAAE,qCAAqC,CAAC,CAAC;IAC1F,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAElB,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,WAAY,EAAE,uCAAuC,CAAC,CAAC;IAE5F,qEAAqE;IACrE,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { config } from 'dotenv';\nimport { P2PNetwork } from \"../src/p2p\";\n\nconfig();\n\nconst SOULIE_KEY = process.env.SOULIE_PRIVATE_KEY || \"\";\nconst GLU_KEY = process.env.GLU_PRIVATE_KEY || \"\";\nconst REGISTRY_ADDRESS = process.env.REGISTRY_ADDRESS || \"\";\nconst RPC_URL = process.env.RPC_URL || \"\";\n\nasync function delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function main() {\n  // Create Soulie instance for sending messages\n  const soulie = new P2PNetwork(\n    SOULIE_KEY,\n    \"soulie\",\n    \"1.0.0\",\n    { creators: \"soulie\" },\n    REGISTRY_ADDRESS,\n    RPC_URL\n  );\n\n  // Create Glu instance for sending messages\n  const glu = new P2PNetwork(\n    GLU_KEY,\n    \"glu\",\n    \"1.0.0\",\n    { creators: \"glu\" },\n    REGISTRY_ADDRESS,\n    RPC_URL\n  );\n\n  // Start both networks\n  await soulie.start(5001);\n  await glu.start(5002);\n\n  // Wait for connections to establish\n  await delay(2000);\n\n  // Simulate conversation\n  console.log(\"Starting conversation...\");\n  \n  await soulie.sendMessage(process.env.GLU_ADDRESS!, \"Hey Glu, how are you?\");\n  await delay(2000);\n  \n  await glu.sendMessage(process.env.SOULIE_ADDRESS!, \"Hi Soulie! I'm good, how about you?\");\n  await delay(2000);\n  \n  await soulie.sendMessage(process.env.GLU_ADDRESS!, \"Great! Just testing this p2p network!\");\n  \n  // Keep the script running for a bit to ensure messages are delivered\n  await delay(5000);\n  console.log(\"Conversation complete!\");\n  process.exit(0);\n}\n\nmain().catch(console.error); "]}