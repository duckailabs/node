{"version":3,"file":"swarm-cli.js","sourceRoot":"","sources":["swarm-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { config } from \"dotenv\";\nimport fs from \"fs\";\nimport readline from \"readline\";\nimport { P2PNetwork } from \"../src/p2p.js\";\n\nconfig();\n\nconst program = new Command();\n\nconst DUCKY_KEY = process.env.DUCKY_PRIVATE_KEY || \"\";\nconst SOULIE_KEY = process.env.SOULIE_PRIVATE_KEY || \"\";\nconst GLU_KEY = process.env.GLU_PRIVATE_KEY || \"\";\nconst REGISTRY_ADDRESS = process.env.REGISTRY_ADDRESS || \"\";\nconst RPC_URL = process.env.RPC_URL || \"\";\n\n// Setup logging with colors\nconst logStream = fs.createWriteStream(\"swarm.log\", { flags: \"a\" });\nfunction log(message: string, type: \"system\" | \"message\" | \"error\" = \"system\") {\n  const timestamp = new Date().toISOString();\n  const logMessage = `[${timestamp}] ${message}\\n`;\n  logStream.write(logMessage);\n\n  switch (type) {\n    case \"system\":\n      console.log(chalk.cyan(message));\n      break;\n    case \"message\":\n      console.log(chalk.green(message));\n      break;\n    case \"error\":\n      console.log(chalk.red(message));\n      break;\n  }\n}\n\nasync function startNode(\n  name: string,\n  key: string,\n  port: number,\n  bootstrapNodes: string[] = []\n) {\n  const network = new P2PNetwork(\n    key,\n    name,\n    \"1.0.0\",\n    { creators: name },\n    REGISTRY_ADDRESS,\n    RPC_URL\n  );\n\n  log(`Starting ${name} node...`);\n  await network.registerWithContract();\n  await network.start(port);\n  log(`${name} node is running on port ${port}`);\n  return network;\n}\n\nasync function startChat() {\n  // Start all nodes\n  log(chalk.bold(\"\\n=== Starting Swarm Nodes ===\"));\n  const ducky = await startNode(\"ducky\", DUCKY_KEY, 5000, []);\n  const soulie = await startNode(\"soulie\", SOULIE_KEY, 5001, [\n    \"/ip4/127.0.0.1/tcp/5000\",\n  ]);\n  const glu = await startNode(\"glu\", GLU_KEY, 5002, [\n    \"/ip4/127.0.0.1/tcp/5000\",\n  ]);\n\n  // Setup CLI\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  let currentAgent = \"ducky\"; // Default agent\n\n  function prompt() {\n    console.log(chalk.yellow(\"\\n=== Available Commands ===\"));\n    console.log(\n      chalk.yellow(\n        \"- use <agent>          # Switch to sending as another agent\"\n      )\n    );\n    console.log(\n      chalk.yellow(\"- msg <to> <message>   # Send message to an agent\")\n    );\n    console.log(chalk.yellow(\"- clear                # Clear the screen\"));\n    console.log(chalk.yellow(\"- exit\\n\"));\n\n    rl.question(chalk.blue(`${currentAgent}> `), async (input) => {\n      const [command, ...args] = input.trim().split(\" \");\n\n      switch (command) {\n        case \"exit\":\n          rl.close();\n          process.exit(0);\n          break;\n\n        case \"use\":\n          const newAgent = args[0]?.toLowerCase();\n          if (![\"ducky\", \"soulie\", \"glu\"].includes(newAgent)) {\n            log(\"Invalid agent. Must be ducky, soulie, or glu\", \"error\");\n          } else {\n            currentAgent = newAgent;\n            log(`Switched to ${currentAgent}`, \"system\");\n          }\n          break;\n\n        case \"clear\":\n          console.clear();\n          break;\n\n        case \"msg\":\n          const [recipient, ...messageParts] = args;\n          const message = messageParts.join(\" \");\n\n          if (!recipient || !message) {\n            log(\"Usage: msg <to> <message>\", \"error\");\n            break;\n          }\n\n          if (![\"ducky\", \"soulie\", \"glu\"].includes(recipient.toLowerCase())) {\n            log(\"Invalid recipient. Must be ducky, soulie, or glu\", \"error\");\n            break;\n          }\n\n          try {\n            const nodes = { ducky, soulie, glu } as const;\n            const senderNode = nodes[currentAgent as keyof typeof nodes];\n            if (!senderNode) {\n              log(\"Invalid sender node\", \"error\");\n              break;\n            }\n\n            const recipientAddress = {\n              ducky: process.env.DUCKY_ADDRESS,\n              soulie: process.env.SOULIE_ADDRESS,\n              glu: process.env.GLU_ADDRESS,\n            }[recipient.toLowerCase()];\n\n            await senderNode.sendMessage(recipientAddress!, message);\n            log(`[${currentAgent}] to [${recipient}]: ${message}`, \"message\");\n          } catch (error) {\n            log(`Error sending message: ${error}`, \"error\");\n          }\n          break;\n\n        default:\n          log(`Unknown command: ${command}`, \"error\");\n      }\n      prompt();\n    });\n  }\n\n  // Start CLI\n  console.clear();\n  log(chalk.bold(\"\\n=== Swarm Chat CLI ===\"));\n  log(\"All nodes are running. Messages are being logged to swarm.log\");\n  log(chalk.italic(\"Messages are end-to-end encrypted\"));\n  log(chalk.bold(`Currently sending as: ${currentAgent}`));\n  prompt();\n}\n\nprogram.name(\"swarm-cli\").description(\"Swarm P2P Chat CLI\").version(\"1.0.0\");\n\nprogram\n  .command(\"start\")\n  .description(\"Start the Swarm chat network\")\n  .action(startChat);\n\nprogram.parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp();\n}\n"]}