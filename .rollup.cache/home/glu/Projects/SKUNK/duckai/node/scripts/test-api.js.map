{"version":3,"file":"test-api.js","sourceRoot":"","sources":["test-api.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,qBAAqB;AACrB,MAAM,OAAO,GAAG,uBAAuB,CAAC;AACxC,MAAM,YAAY,GAAG,4CAA4C,CAAC;AAElE,KAAK,UAAU,WAAW;IACxB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,GAAG,OAAO,UAAU,EACpB;YACE,EAAE,EAAE,YAAY;YAChB,OAAO,EAAE,wBAAwB;YACjC,cAAc,EAAE,QAAQ;SACzB,EACD;YACE,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;SACF,CACF,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CACX,wBAAwB,EACvB,KAAa,CAAC,QAAQ,EAAE,IAAI,IAAI,KAAK,CACvC,CAAC;IACJ,CAAC;AACH,CAAC;AAED,KAAK,UAAU,SAAS;IACtB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,SAAS,CAAC,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACzC,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YACxE,OAAO,CAAC,GAAG,CAAC,WAAW,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;YACzE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CACX,uBAAuB,EACtB,KAAa,CAAC,QAAQ,EAAE,IAAI,IAAI,KAAK,CACvC,CAAC;IACJ,CAAC;AACH,CAAC;AAED,KAAK,UAAU,IAAI;IACjB,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhC,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,MAAM;YACT,MAAM,WAAW,EAAE,CAAC;YACpB,MAAM;QACR,KAAK,QAAQ;YACX,MAAM,SAAS,EAAE,CAAC;YAClB,MAAM;QACR;YACE,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;YAC1D,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;IACpE,CAAC;AACH,CAAC;AAED,IAAI,EAAE,CAAC","sourcesContent":["import axios from \"axios\";\n\n// API server details\nconst API_URL = \"http://localhost:3000\";\nconst TARGET_AGENT = \"0x87886DD580DE7daAe4bC0A204A50A73F89281B28\";\n\nasync function sendMessage() {\n  try {\n    const response = await axios.post(\n      `${API_URL}/message`,\n      {\n        to: TARGET_AGENT,\n        content: \"Hello agent2 from API!\",\n        conversationId: \"test-1\",\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    console.log(\"Message sent successfully:\", response.data);\n  } catch (error) {\n    console.error(\n      \"Error sending message:\",\n      (error as any).response?.data || error\n    );\n  }\n}\n\nasync function getAgents() {\n  try {\n    const response = await axios.get(`${API_URL}/agents`);\n    console.log(\"\\nConnected Agents:\");\n    console.log(\"================\");\n    response.data.forEach((agent: any) => {\n      console.log(`\\nName: ${agent.name}`);\n      console.log(`Address: ${agent.address}`);\n      console.log(`Peer ID: ${agent.peerId}`);\n      console.log(`Last Seen: ${new Date(agent.timestamp).toLocaleString()}`);\n      console.log(`Status: ${agent.isConnected ? \"ðŸŸ¢ Online\" : \"ðŸ”´ Offline\"}`);\n      console.log(\"-\".repeat(50));\n    });\n  } catch (error) {\n    console.error(\n      \"Error getting agents:\",\n      (error as any).response?.data || error\n    );\n  }\n}\n\nasync function main() {\n  const command = process.argv[2];\n\n  switch (command) {\n    case \"send\":\n      await sendMessage();\n      break;\n    case \"agents\":\n      await getAgents();\n      break;\n    default:\n      console.log(\"Usage: ts-node test-api.ts [send|agents]\");\n      console.log(\"  send   - Send a test message to an agent\");\n      console.log(\"  agents - Get list of all agents in the network\");\n  }\n}\n\nmain();\n"]}