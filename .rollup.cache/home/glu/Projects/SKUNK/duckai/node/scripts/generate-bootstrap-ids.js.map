{"version":3,"file":"generate-bootstrap-ids.js","sourceRoot":"","sources":["generate-bootstrap-ids.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,MAAM,aAAa,CAAC;AAC7B,OAAO,EAAE,QAAQ,IAAI,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,KAAK,UAAU,oBAAoB;IACjC,MAAM,cAAc,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IACpF,MAAM,OAAO,GAAG;QACd,aAAa,EAAE,SAAS;QACxB,aAAa,EAAE,SAAS;QACxB,aAAa,EAAE,SAAS;QACxB,aAAa,EAAE,KAAK;KACZ,CAAC;IAEX,MAAM,EAAE,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAExD,KAAK,MAAM,IAAI,IAAI,cAAc,EAAE,CAAC;QAClC,MAAM,MAAM,GAAG,MAAM,qBAAqB,EAAE,CAAC;QAE7C,4CAA4C;QAC5C,MAAM,QAAQ,GAAG;YACf,EAAE,EAAE,MAAM,CAAC,QAAQ,EAAE;YACrB,UAAU,EAAE,kBAAkB,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,UAAU,EAAE,EAAE,WAAW,CAAC;SACnF,CAAC;QAEF,MAAM,EAAE,CAAC,SAAS,CAChB,oBAAoB,IAAI,YAAY,EACpC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAClC,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,IAAI,EAAE,EAAE;YACnD,MAAM,EAAE,MAAM,CAAC,QAAQ,EAAE;YACzB,MAAM,EAAE,OAAO,CAAC,IAA4B,CAAC;SAC9C,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,yBAAyB;AACzB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,UAAU,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACpD,oBAAoB,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["import { createSecp256k1PeerId } from '@libp2p/peer-id-factory';\nimport fs from 'fs/promises';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { Logger } from '../src/utils/logger';\n\nasync function generateBootstrapIds() {\n  const bootstrapNodes = ['bootstrap-1', 'bootstrap-2', 'bootstrap-3', 'bootstrap-4'];\n  const regions = {\n    'bootstrap-1': 'us-east',\n    'bootstrap-2': 'us-west',\n    'bootstrap-3': 'eu-west',\n    'bootstrap-4': 'sea'\n  } as const;\n\n  await fs.mkdir('./bootstrap-keys', { recursive: true });\n  \n  for (const node of bootstrapNodes) {\n    const peerId = await createSecp256k1PeerId();\n    \n    // Store the marshalled private key directly\n    const peerInfo = {\n      id: peerId.toString(),\n      privateKey: uint8ArrayToString(peerId.privateKey ?? new Uint8Array(), 'base64pad')\n    };\n    \n    await fs.writeFile(\n      `./bootstrap-keys/${node}-peer.json`,\n      JSON.stringify(peerInfo, null, 2)\n    );\n\n    Logger.info('Bootstrap', `Generated ID for ${node}`, {\n      peerId: peerId.toString(),\n      region: regions[node as keyof typeof regions]\n    });\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  generateBootstrapIds().catch(console.error);\n} "]}