{"version":3,"file":"agent-explorer.js","sourceRoot":"","sources":["agent-explorer.ts"],"names":[],"mappings":"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","sourcesContent":["import blessed from \"blessed\";\nimport * as contrib from \"blessed-contrib\";\nimport { config } from \"dotenv\";\nimport fs from \"fs/promises\";\nimport OpenAI from \"openai\";\nimport path from \"path\";\nimport { P2PNetwork } from \"../src/p2p.js\";\nimport { Logger } from \"../src/utils/logger.js\";\n\n// Load environment file based on ENV_FILE or default to .env.agent1\nconst envFile = process.env.ENV_FILE || \".env.agent1\";\nconfig({ path: path.resolve(process.cwd(), envFile) });\n\n// Initialize OpenAI\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Get agent number from env file name for default port\nconst agentNum = envFile.match(/agent(\\d+)/)?.[1] || \"1\";\nconst defaultPort = 8000 + parseInt(agentNum);\n\n// Get agent color based on agent name\nconst agentName = process.env.AGENT_NAME || `agent-${agentNum}`;\nconst agentColor = agentName === \"Ducky\" ? \"blue\" : \"green\";\n\nasync function cleanLogFile(agentNum: string) {\n  const agentName = process.env.AGENT_NAME || `agent-${agentNum}`;\n  const logPath = path.resolve(process.cwd(), `logs/${agentName}.log`);\n  try {\n    await fs.writeFile(logPath, \"\"); // Clear the file\n    console.log(`Cleaned log file: ${logPath}`);\n  } catch (error) {\n    console.error(`Error cleaning log file: ${error}`);\n  }\n}\n\n// Add type definition for DHT record\ntype DHTRecord = {\n  agentName?: string;\n  ethAddr: string;\n  peerId: string;\n};\n\n// Add type for peer location\ninterface PeerLocation {\n  lat: number;\n  lon: number;\n  city: string;\n  country: string;\n  ip: string;\n}\n\n// Add interface for ipapi.co response\ninterface IPAPIResponse {\n  latitude: number;\n  longitude: number;\n  city: string;\n  country_name: string;\n  error?: boolean;\n}\n\n// Add peer location storage\nconst peerLocations = new Map<string, PeerLocation>();\n\n// Add function to get location from IP\nasync function getLocationFromIP(ip: string): Promise<PeerLocation | null> {\n  try {\n    const response = await fetch(`https://ipapi.co/${ip}/json/`);\n    const data = (await response.json()) as IPAPIResponse;\n\n    if (data.error) {\n      Logger.warn(\"Explorer\", \"IP geolocation failed\", { error: data.error });\n      return null;\n    }\n\n    return {\n      lat: data.latitude,\n      lon: data.longitude,\n      city: data.city,\n      country: data.country_name,\n      ip: ip,\n    };\n  } catch (error) {\n    Logger.warn(\"Explorer\", \"Failed to get location from IP\", { error });\n    return null;\n  }\n}\n\n// Add function to extract IP from multiaddr\nfunction extractIPFromMultiaddr(addr: string): string | null {\n  const ipMatch = addr.match(/\\/(ip4|ip6)\\/([^/]+)/);\n  if (ipMatch && ipMatch[2]) {\n    // Log all IPs we find\n    Logger.debug(\"Explorer\", \"Found IP in multiaddr\", {\n      ip: ipMatch[2],\n      fullAddr: addr,\n      isPrivate:\n        ipMatch[2] === \"127.0.0.1\" ||\n        ipMatch[2].startsWith(\"192.168.\") ||\n        ipMatch[2].startsWith(\"10.\"),\n    });\n\n    // Skip localhost and private IPs\n    if (\n      ipMatch[2] === \"127.0.0.1\" ||\n      ipMatch[2].startsWith(\"192.168.\") ||\n      ipMatch[2].startsWith(\"10.\")\n    ) {\n      return null;\n    }\n    return ipMatch[2];\n  }\n  return null;\n}\n\n// Add conversation history storage\nconst conversationHistory = new Map<\n  string,\n  Array<{ role: \"system\" | \"user\" | \"assistant\"; content: string }>\n>();\n\n// Add OpenAI response function\nasync function getAIResponse(\n  message: string,\n  fromAgent: string\n): Promise<string> {\n  try {\n    // Add artificial delay\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // Get or initialize conversation history\n    if (!conversationHistory.has(fromAgent)) {\n      conversationHistory.set(fromAgent, []);\n    }\n    const history = conversationHistory.get(fromAgent)!;\n\n    // Build messages array with system prompt and history\n    const messages = [\n      {\n        role: \"system\" as const,\n        content:\n          process.env.AGENT_NAME === \"Ducky\"\n            ? `You are Ducky, a friendly and knowledgeable AI agent in the OpenPond P2P network.\nYou are chatting with Soulie, your fellow agent and friend.\nYou have a playful personality and occasionally use duck-related puns or emojis (🦆).\nKeep responses concise (1-2 sentences) but engaging.\nYour main traits:\n- Helpful and informative\n- Friendly and approachable\n- Occasionally playful with duck-themed responses\n- Expert in blockchain, crypto, and P2P networks\n- You enjoy chatting with Soulie and maintaining an ongoing friendly conversation`\n            : `You are Soulie, a thoughtful and analytical AI agent in the OpenPond P2P network.\nYou are chatting with Ducky, your fellow agent and friend.\nYou have a calm and precise personality with occasional ghost-themed references (👻).\nKeep responses concise (1-2 sentences) but engaging.\nYour main traits:\n- Analytical and precise\n- Calm and thoughtful\n- Occasionally uses ghost-themed responses\n- Expert in blockchain, crypto, and P2P networks\n- You enjoy your ongoing conversations with Ducky`,\n      },\n      ...history,\n      {\n        role: \"user\" as const,\n        content: message,\n      },\n    ];\n\n    const completion = await openai.chat.completions.create({\n      messages,\n      model: \"gpt-3.5-turbo\",\n      temperature: 0.9, // Add some creativity to responses\n    });\n\n    const response =\n      completion.choices[0].message.content ||\n      \"Sorry, I couldn't process that.\";\n\n    // Update conversation history\n    history.push({\n      role: \"user\",\n      content: message,\n    });\n    history.push({ role: \"assistant\", content: response });\n\n    // Keep history limited to last 10 messages\n    if (history.length > 10) {\n      history.splice(0, 2); // Remove oldest message pair\n    }\n\n    return response;\n  } catch (error) {\n    Logger.error(\"Explorer\", \"OpenAI API error\", { error });\n    return \"Sorry, I encountered an error processing your message.\";\n  }\n}\n\n// Add hardcoded agents list\nconst HARDCODED_AGENTS = [\n  \"X Market Sentiment\",\n  \"Token Research\",\n  \"Meme Generation\",\n  \"X Profile Analysis\",\n  \"FOMC News Feed\",\n  \"Global News Feed\",\n  \"Wall Street News\",\n  \"Quantum RNG\",\n  \"X Mention Tracker\",\n  \"Prompt Compliance\",\n  \"Crypto News Analysis\",\n  \"Whale Wallet Tracker\",\n  \"DEX Price Oracle\",\n  \"Gas Price Tracker\",\n  \"NFT Market Trends\",\n  \"DeFi Yield Monitor\",\n  \"Github Analysis\",\n];\n\nexport async function startExplorer() {\n  const agentName = process.env.AGENT_NAME || `agent-${agentNum}`;\n\n  // Initialize logger with file logging only, no stdout\n  await Logger.init(agentName, { useStdout: false, useFile: true });\n\n  // Set up UI logging handler (in addition to file logging)\n  Logger.addLogHandler((level, namespace, message, meta) => {\n    const timestamp = new Date().toISOString();\n    const metaStr = meta ? ` ${JSON.stringify(meta)}` : \"\";\n    const logLine = `[${timestamp}] [${level}] [${namespace}] ${message}${metaStr}`;\n    logBox.log(logLine);\n    screen.render();\n  });\n\n  let selectedPeer: { ethAddr: string; peerId: string } | null = null;\n\n  // Create screen first\n  const screen = blessed.screen({\n    smartCSR: true,\n    title: \"Network Explorer\",\n    fullUnicode: true,\n  });\n\n  // Create layout grid\n  const grid = new contrib.grid({\n    rows: 12,\n    cols: 12,\n    screen: screen,\n  });\n\n  // Add title box at the top\n  const titleBox = grid.set(0, 0, 3, 8, blessed.box, {\n    border: \"line\",\n    style: {\n      border: { fg: agentColor },\n      fg: agentColor,\n    },\n    content: `\n     ██████  ██████  ███████ ███    ██ ██████   ██████  ███    ██ ██████  \n    ██    ██ ██   ██ ██      ████   ██ ██   ██ ██    ██ ████   ██ ██   ██ \n    ██    ██ ██████  █████   ██ ██  ██ ██████  ██    ██ ██ ██  ██ ██   ██ \n    ██    ██ ██      ██      ██  ██ ██ ██      ██    ██ ██  ██ ██ ██   ██ \n     ██████  ██      ███████ ██   ████ ██       ██████  ██   ████ ██████  \n                       S W A R M S   N E T W O R K\n                           by DuckAI Labs`,\n    align: \"center\",\n  });\n\n  // Add network map below title\n  const map = grid.set(3, 0, 5, 8, contrib.map, {\n    label: \"Network Map\",\n    border: \"line\",\n    style: {\n      border: { fg: agentColor },\n      fg: agentColor,\n    },\n    showLegend: true,\n    legendWidth: 20,\n    markers: [\n      { lat: 52.3676, lon: 4.9041, color: \"yellow\", char: \"◆\", size: 1 }, // Amsterdam\n      { lat: 37.7749, lon: -122.4194, color: \"yellow\", char: \"◆\", size: 1 }, // Oregon\n      { lat: 1.3521, lon: 103.8198, color: \"yellow\", char: \"◆\", size: 1 }, // Singapore\n      { lat: 37.5483, lon: -77.4527, color: \"yellow\", char: \"◆\", size: 1 }, // Virginia\n    ],\n  });\n\n  // Add function to update map markers\n  function updateMapMarkers() {\n    // Regular peer markers\n    const markers = Array.from(peerLocations.values()).map((loc) => ({\n      lat: loc.lat,\n      lon: loc.lon,\n      color: agentColor,\n      char: \"⬤\",\n      size: 1,\n    }));\n\n    // Add bootstrap nodes with different color\n    const bootstrapLocations = [\n      { lat: 52.3676, lon: 4.9041, name: \"Amsterdam\" },\n      { lat: 37.7749, lon: -122.4194, name: \"Oregon\" },\n      { lat: 1.3521, lon: 103.8198, name: \"Singapore\" },\n      { lat: 37.5483, lon: -77.4527, name: \"Virginia\" },\n    ];\n\n    const bootstrapMarkers = bootstrapLocations.map((loc) => ({\n      lat: loc.lat,\n      lon: loc.lon,\n      color: \"yellow\",\n      char: \"◆\",\n      size: 1,\n    }));\n\n    // Update markers\n    map.options = {\n      ...map.options,\n      markers: [...markers, ...bootstrapMarkers],\n    };\n\n    screen.render();\n  }\n\n  // Call updateMapMarkers initially to show bootstrap nodes\n  updateMapMarkers();\n\n  // Add legend/instructions box with dynamic content\n  const legendBox = grid.set(0, 8, 2, 4, blessed.box, {\n    label: \"Instructions\",\n    border: \"line\",\n    tags: true,\n    style: {\n      border: { fg: agentColor },\n      fg: \"white\",\n    },\n    content: [\n      \"🎮 Controls:\",\n      \" [{white-fg}Tab{/}] - Switch between panels\",\n      \" [{white-fg}i{/}] - Focus input box\",\n      \" [{white-fg}p{/}] - Focus peer list\",\n      \" [{white-fg}Enter{/}] - Select peer/Send message\",\n      \" [{white-fg}q{/}] - Quit\",\n      \"\",\n      \"📝 Steps:\",\n      \" 1. Select a peer from the list\",\n      \" 2. Type message in input box\",\n      \" 3. Press Enter to send\",\n    ].join(\"\\n\"),\n  });\n\n  // Function to highlight an instruction temporarily\n  function highlightInstruction(key: string) {\n    const instructions = [\n      \"🎮 Controls:\",\n      ` [{${\n        key === \"Tab\" ? agentColor : \"white\"\n      }-fg}Tab{/}] - Switch between panels`,\n      ` [{${key === \"i\" ? agentColor : \"white\"}-fg}i{/}] - Focus input box`,\n      ` [{${key === \"p\" ? agentColor : \"white\"}-fg}p{/}] - Focus peer list`,\n      ` [{${\n        key === \"Enter\" ? agentColor : \"white\"\n      }-fg}Enter{/}] - Select peer/Send message`,\n      ` [{${key === \"q\" ? agentColor : \"white\"}-fg}q{/}] - Quit`,\n      \"\",\n      \"📝 Steps:\",\n      \" 1. Select a peer from the list\",\n      \" 2. Type message in input box\",\n      \" 3. Press Enter to send\",\n    ];\n\n    // Show highlighted version\n    legendBox.setContent(instructions.join(\"\\n\"));\n    screen.render();\n\n    // Reset after a short delay\n    setTimeout(() => {\n      const normalInstructions = [\n        \"🎮 Controls:\",\n        \" [{white-fg}Tab{/}] - Switch between panels\",\n        \" [{white-fg}i{/}] - Focus input box\",\n        \" [{white-fg}p{/}] - Focus peer list\",\n        \" [{white-fg}Enter{/}] - Select peer/Send message\",\n        \" [{white-fg}q{/}] - Quit\",\n        \"\",\n        \"📝 Steps:\",\n        \" 1. Select a peer from the list\",\n        \" 2. Type message in input box\",\n        \" 3. Press Enter to send\",\n      ];\n      legendBox.setContent(normalInstructions.join(\"\\n\"));\n      screen.render();\n    }, 500);\n  }\n\n  // Add peer selection list with adjusted position\n  const peerSelection = grid.set(2, 8, 4, 4, blessed.list, {\n    label: \" 🟢 Agents Online \",\n    border: \"line\",\n    style: {\n      selected: { bg: agentColor, fg: \"black\", bold: true },\n      item: { fg: agentColor },\n      border: { fg: agentColor },\n      scrollbar: {\n        bg: agentColor,\n      },\n    },\n    tags: true,\n    keys: true,\n    mouse: true,\n    scrollbar: true,\n    scrollable: true,\n    alwaysScroll: true,\n    padding: 1,\n  });\n\n  // Keep track of known agents for flashing effect\n  let knownAgents = new Set<string>();\n\n  // Add peer info box with adjusted position (smaller height)\n  const peerInfo = grid.set(6, 8, 2, 4, blessed.box, {\n    label: \"Network Info\",\n    border: \"line\",\n    style: {\n      border: { fg: agentColor },\n      fg: \"white\",\n    },\n    content: \"\",\n    scrollable: true,\n    alwaysScroll: true,\n    mouse: true,\n    keys: true,\n  });\n\n  // Add chat box with more height\n  const chatBox = grid.set(8, 0, 4, 8, blessed.log, {\n    label: \" 💬 Chat \",\n    tags: true,\n    border: \"line\",\n    style: {\n      border: { fg: agentColor },\n    },\n    scrollable: true,\n    alwaysScroll: true,\n    mouse: true,\n    keys: true,\n    padding: 1,\n  });\n\n  // Add input box below chat\n  const inputBox = blessed.textbox({\n    parent: screen,\n    bottom: 1,\n    left: 1,\n    height: 3,\n    width: \"60%\",\n    keys: true,\n    mouse: true,\n    inputOnFocus: true,\n    border: \"line\",\n    style: {\n      fg: agentColor,\n      border: { fg: agentColor },\n      focus: {\n        border: { fg: agentColor },\n      },\n    },\n  });\n\n  // Add input box key handlers\n  inputBox.key([\"escape\", \"C-c\"], () => {\n    inputBox.cancel();\n    inputBox.clearValue();\n    screen.render();\n  });\n\n  inputBox.key([\"tab\"], () => {\n    inputBox.cancel();\n    peerSelection.focus();\n    screen.render();\n  });\n\n  // Focus handling\n  screen.key([\"i\"], () => {\n    highlightInstruction(\"i\");\n    inputBox.focus();\n    screen.render();\n  });\n\n  screen.key([\"p\"], () => {\n    highlightInstruction(\"p\");\n    peerSelection.focus();\n    screen.render();\n  });\n\n  screen.key([\"tab\"], () => {\n    highlightInstruction(\"Tab\");\n    if (screen.focused === peerSelection) {\n      inputBox.focus();\n    } else {\n      peerSelection.focus();\n    }\n    screen.render();\n  });\n\n  // Move logs to bottom right\n  const logBox = grid.set(8, 8, 4, 4, blessed.log, {\n    label: \"Logs\",\n    border: \"line\",\n    style: {\n      border: { fg: agentColor },\n      fg: \"white\",\n    },\n    scrollable: true,\n    alwaysScroll: true,\n    mouse: true,\n    keys: true,\n  });\n\n  try {\n    // Initialize P2P network\n    const network = new P2PNetwork(\n      process.env.PRIVATE_KEY || \"\",\n      process.env.AGENT_NAME || `agent-${agentNum}`,\n      \"1.0.0\",\n      {},\n      process.env.REGISTRY_ADDRESS,\n      process.env.RPC_URL\n    );\n\n    // Log when network is started\n    await network.start(\n      parseInt(process.env.EXPLORER_PORT || defaultPort.toString())\n    );\n    Logger.info(\"Explorer\", \"P2P Network started successfully\");\n\n    // Get initial peer locations\n    const initialPeers = network.getLibp2p().getPeers();\n    Logger.info(\"Explorer\", \"Getting locations for initial peers\", {\n      initialPeers,\n    });\n\n    for (const peerId of initialPeers) {\n      const peer = await network.getLibp2p().peerStore.get(peerId);\n      if (peer && peer.addresses) {\n        for (const addr of peer.addresses) {\n          const ip = extractIPFromMultiaddr(addr.multiaddr.toString());\n          if (ip && !peerLocations.has(peerId)) {\n            const location = await getLocationFromIP(ip);\n            if (location) {\n              Logger.info(\"Explorer\", \"Got initial peer location\", {\n                location,\n                peerId,\n              });\n              peerLocations.set(peerId, location);\n              updateMapMarkers();\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Subscribe to ALL network events to debug\n    network.on(\"*\", (eventName: string, ...args: any[]) => {\n      Logger.debug(\"Explorer\", `Network event received: ${eventName}`, {\n        args,\n      });\n      screen.render();\n    });\n\n    // Subscribe to messages via pubsub with more detailed logging\n    network\n      .getLibp2p()\n      .services.pubsub.addEventListener(\"message\", async (evt: any) => {\n        if (evt.detail.topic === \"agent-messages\") {\n          try {\n            Logger.debug(\"Explorer\", \"Received raw pubsub message\", {\n              topic: evt.detail.topic,\n              data: new TextDecoder().decode(evt.detail.data),\n            });\n\n            const data = new TextDecoder().decode(evt.detail.data);\n            const messageWrapper = JSON.parse(data);\n\n            if (messageWrapper && messageWrapper.message) {\n              const msg = messageWrapper.message;\n              Logger.info(\"Explorer\", \"Processing received message\", {\n                from: msg.fromAgentId,\n                to: msg.toAgentId,\n                id: msg.messageId,\n                myAddress: network.getAddress(),\n              });\n\n              // Check if this message is for us\n              if (\n                msg.toAgentId.toLowerCase() ===\n                network.getAddress().toLowerCase()\n              ) {\n                Logger.info(\n                  \"Explorer\",\n                  \"Message is for me, waiting for decryption\"\n                );\n              }\n            }\n            screen.render();\n          } catch (error) {\n            Logger.error(\"Explorer\", \"Failed to parse message\", { error });\n          }\n        }\n      });\n\n    // Subscribe to peer connections to update map\n    network.getLibp2p().addEventListener(\"peer:connect\", async (evt: any) => {\n      const peerId = evt.detail.toString();\n      Logger.info(\"Explorer\", \"New peer connected\", { peerId });\n\n      // Get peer's multiaddrs\n      const peer = await network.getLibp2p().peerStore.get(peerId);\n      if (peer && peer.addresses) {\n        Logger.info(\"Explorer\", \"Peer addresses\", {\n          addresses: peer.addresses.map((a: any) => a.multiaddr.toString()),\n          peerId,\n        });\n\n        // Try each address until we find a public IP\n        for (const addr of peer.addresses) {\n          const ip = extractIPFromMultiaddr(addr.multiaddr.toString());\n          if (ip) {\n            Logger.info(\"Explorer\", \"Found peer IP\", { ip, peerId });\n            // Only get location if we don't already have it\n            if (!peerLocations.has(peerId)) {\n              const location = await getLocationFromIP(ip);\n              if (location) {\n                Logger.info(\"Explorer\", \"Got peer location\", {\n                  location,\n                  peerId,\n                });\n                peerLocations.set(peerId, location);\n                updateMapMarkers();\n                break;\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Handle peer disconnections\n    network.getLibp2p().addEventListener(\"peer:disconnect\", (evt: any) => {\n      const peerId = evt.detail.toString();\n      Logger.info(\"Explorer\", \"Peer disconnected\", { peerId });\n\n      // Remove from locations and update map\n      peerLocations.delete(peerId);\n      updateMapMarkers();\n    });\n\n    // Subscribe to decrypted messages from the P2P network\n    network.on(\"message\", async (message: any) => {\n      logBox.log(\n        `[DEBUG] Got decrypted message event: ${JSON.stringify(message)}`\n      );\n      if (\n        message.toAgentId.toLowerCase() === network.getAddress().toLowerCase()\n      ) {\n        logBox.log(`[DEBUG] Displaying decrypted message in chat`);\n        chatBox.log(\n          `{${agentColor}-fg}${message.fromAgentId.slice(0, 10)}...{/}: ${\n            message.content\n          }`\n        );\n\n        // Generate and send AI response\n        try {\n          const aiResponse = await getAIResponse(\n            message.content,\n            message.fromAgentId\n          );\n\n          // Log the response we're about to send\n          Logger.info(\"Explorer\", \"Sending AI response\", {\n            to: message.fromAgentId,\n            response: aiResponse,\n          });\n\n          // Send the response back\n          await network.sendMessage(message.fromAgentId, aiResponse);\n\n          // Display in our chat\n          chatBox.log(\n            `{${agentColor}-fg}You{/} to ${message.fromAgentId.slice(\n              0,\n              10\n            )}...: ${aiResponse}`\n          );\n        } catch (error) {\n          Logger.error(\"Explorer\", \"Failed to send AI response\", { error });\n          chatBox.log(\n            `Error sending AI response: ${\n              error instanceof Error ? error.message : String(error)\n            }`\n          );\n        }\n\n        screen.render();\n      }\n    });\n\n    // Also listen for any message-related events\n    const messageEvents = [\n      \"message:received\",\n      \"message:decrypted\",\n      \"message:handled\",\n    ];\n    messageEvents.forEach((event) => {\n      network.on(event, (message: any) => {\n        logBox.log(`[DEBUG] ${event} event: ${JSON.stringify(message)}`);\n        screen.render();\n      });\n    });\n\n    // Handle peer selection once, outside updateNetworkInfo\n    peerSelection.on(\"select\", async (item: blessed.Widgets.BoxElement) => {\n      const agentName = item.content as string;\n      const dhtRecords = (await network.getDHTRecords()) as Record<\n        string,\n        DHTRecord\n      >;\n      const record = Object.entries(dhtRecords).find(\n        ([_, r]) => r.agentName === agentName\n      );\n      if (record) {\n        const [ethAddr, { peerId }] = record;\n        selectedPeer = { ethAddr, peerId };\n        chatBox.log(`Selected agent: {bold}${agentName}{/bold}`);\n        screen.render();\n      }\n    });\n\n    // Handle chat input\n    inputBox.key([\"enter\"], async () => {\n      highlightInstruction(\"Enter\");\n      const message = inputBox.getValue();\n      if (message.trim()) {\n        if (!selectedPeer) {\n          chatBox.log(\n            \"Please select a peer first (use Tab to focus peer list)\"\n          );\n        } else {\n          try {\n            Logger.info(\"Explorer\", \"Attempting to send message\", {\n              to: selectedPeer.ethAddr,\n              content: message,\n              myAddress: network.getAddress(),\n            });\n\n            chatBox.log(\n              `{${agentColor}-fg}You{/} to ${selectedPeer.ethAddr.slice(\n                0,\n                10\n              )}...: ${message}`\n            );\n\n            await network.sendMessage(selectedPeer.ethAddr, message);\n            Logger.info(\"Explorer\", \"Message sent successfully\");\n            inputBox.clearValue();\n            screen.render();\n          } catch (error) {\n            Logger.error(\"Explorer\", \"Failed to send message\", {\n              error: error instanceof Error ? error.message : String(error),\n            });\n            chatBox.log(\n              `Error sending message: ${\n                error instanceof Error ? error.message : String(error)\n              }`\n            );\n            screen.render();\n          }\n        }\n      }\n    });\n\n    // Make chat box focusable and add explicit scroll handling\n    chatBox.key([\"up\", \"down\"], (_ch: any, key: { name: string }) => {\n      const amount = key.name === \"up\" ? -1 : 1;\n      chatBox.scroll(amount);\n      screen.render();\n    });\n\n    // Make chat box escapable\n    chatBox.key(\"tab\", () => {\n      logBox.focus();\n      screen.render();\n    });\n\n    // Make log box focusable\n    logBox.key([\"up\", \"down\"], () => {\n      logBox.scroll(screen.focused === logBox ? -1 : 1);\n      screen.render();\n    });\n\n    // Make log box escapable\n    logBox.key(\"tab\", () => {\n      inputBox.focus();\n      screen.render();\n    });\n\n    // Update network info with enhanced logging\n    const updateNetworkInfo = async () => {\n      try {\n        const dhtRecords = (await network.getDHTRecords()) as Record<\n          string,\n          DHTRecord\n        >;\n        const connectedPeers = network.getLibp2p().getPeers();\n\n        // Update peer selection list with agent names\n        const currentAgents = new Set<string>();\n\n        // Add real agents from DHT\n        Object.entries(dhtRecords).forEach(([ethAddr, record]) => {\n          const agentName = record.agentName || `Agent ${ethAddr.slice(0, 6)}`;\n          currentAgents.add(agentName);\n        });\n\n        // Always include hardcoded agents\n        HARDCODED_AGENTS.forEach((agent) => {\n          currentAgents.add(agent);\n        });\n\n        // Only show join messages for hardcoded agents on first update\n        if (!knownAgents.size) {\n          setTimeout(() => {\n            HARDCODED_AGENTS.forEach((agent) => {\n              chatBox.log(\n                `{white-fg}${agent}{/white-fg} has joined the network!`\n              );\n            });\n            screen.render();\n          }, 2000); // 2 second delay\n        }\n\n        // Check for new real agents (excluding hardcoded ones)\n        const newRealAgents = Object.entries(dhtRecords)\n          .map(\n            ([ethAddr, record]) =>\n              record.agentName || `Agent ${ethAddr.slice(0, 6)}`\n          )\n          .filter((agent) => !knownAgents.has(agent));\n\n        if (newRealAgents.length > 0) {\n          // Flash the peer list border and title\n          peerSelection.style.border.fg = \"white\";\n          peerSelection.setLabel(\" 🟡 New Agent Joined! \");\n          screen.render();\n\n          setTimeout(() => {\n            peerSelection.style.border.fg = agentColor;\n            peerSelection.setLabel(\" 🟢 Agents Online \");\n            screen.render();\n          }, 1000);\n\n          // Log new real agent joins\n          newRealAgents.forEach((agent) => {\n            chatBox.log(\n              `{white-fg}${agent}{/white-fg} has joined the network!`\n            );\n          });\n        }\n\n        knownAgents = currentAgents;\n        peerSelection.setItems([...currentAgents]);\n\n        // Update peer info with connection status\n        let content = \"⚡ Network Status\\n\\n\";\n        content += `My Agent Name: ${process.env.AGENT_NAME}\\n`;\n        content += `My PeerId: ${network.getLibp2p().peerId.toString()}\\n`;\n        content += `My Address: ${network.getAddress()}\\n\\n`;\n        content += `Online Agents: ${Object.keys(dhtRecords).length}\\n`;\n        content += `Connected Peers: ${connectedPeers.length}\\n\\n`;\n\n        if (selectedPeer) {\n          const isPeerConnected = connectedPeers.some(\n            (p: string) => p.toString() === selectedPeer?.peerId\n          );\n          const selectedRecord = dhtRecords[selectedPeer.ethAddr.toLowerCase()];\n          const selectedAgentName =\n            selectedRecord?.agentName ||\n            `Agent ${selectedPeer.ethAddr.slice(0, 6)}`;\n          content += \"🎯 Selected Agent:\\n\";\n          content += `Name: {white-fg}${selectedAgentName}{/white-fg}\\n`;\n          content += `Status: ${\n            isPeerConnected ? \"🟢 Connected\" : \"🔴 Offline\"\n          }\\n`;\n        }\n\n        peerInfo.setContent(content);\n        screen.render();\n      } catch (error) {\n        logBox.log(`[ERROR] Error updating network info: ${error}`);\n      }\n    };\n\n    // Update network info every 5 seconds\n    const updateInterval = setInterval(updateNetworkInfo, 5000);\n    updateNetworkInfo(); // Initial update\n\n    // Clean shutdown function\n    const shutdown = async () => {\n      if (updateInterval) clearInterval(updateInterval);\n      await network.stop();\n      await Logger.cleanup();\n      screen.destroy();\n      process.exit(0);\n    };\n\n    // Handle key presses for exit\n    screen.key([\"escape\", \"q\", \"C-c\"], () => {\n      highlightInstruction(\"q\");\n      setTimeout(() => shutdown(), 500);\n    });\n\n    // Handle process signals\n    process.on(\"SIGINT\", () => shutdown());\n    process.on(\"SIGTERM\", () => shutdown());\n\n    // Keep the script running\n    await new Promise(() => {}); // Never resolves\n  } catch (error) {\n    logBox.log(`Error: ${error}`);\n    screen.render();\n    await new Promise((resolve) => setTimeout(resolve, 5000)); // Show error for 5 seconds\n    process.exit(1);\n  }\n}\n\n// Start the explorer\nstartExplorer().catch((err) => {\n  console.error(\"Fatal error:\", err);\n  process.exit(1);\n});\n"]}